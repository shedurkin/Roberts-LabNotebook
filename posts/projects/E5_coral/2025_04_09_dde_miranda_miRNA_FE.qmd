---
title: "Deep-Dive Expression: Functional annotation/enrichment of each miRNA's targets"
author: "Kathleen Durkin"
date: "2025-04-09"
categories: ["E5-coral"]
format:
  html:
    toc: true
execute: 
  eval: FALSE
engine: knitr
bibliography: ../../../references.bib
---

This code attempts to identify the function of each miRNA by running functional enrichment analysis on each miRNA's set of target genes.

[Code](https://github.com/urol-e5/deep-dive-expression/blob/main/D-Apul/code/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment.Rmd)\
[Rendered code](https://github.com/urol-e5/deep-dive-expression/blob/main/D-Apul/code/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment.md?plain=1)\
[Output files](https://github.com/urol-e5/deep-dive-expression/tree/main/D-Apul/output/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment)

Also see post on [functional enrichment of all targets](./2025_04_08_dde_miranda_FE.qmd)

# 1 Format topGO files

## 1.1 Read in and format annotation files

``` r
# Read in Apul annotations
annot_locations <- read.delim("../output/02-Apul-reference-annotation/Apulcra-genome-mRNA-IDmapping-2024_12_12.tab")
# Remove unneeded columns 
annot_locations <- annot_locations %>% dplyr::select(-X, -V13)
# Ensure there are no duplicate rows
annot_locations <- annot_locations %>% distinct()

head(annot_locations)
```

```         
##                     V1     V3 Protein.names
## 1   ntLink_4:1155-1537 P35061   Histone H2A
## 2   ntLink_4:2660-3441 P84239    Histone H3
## 3   ntLink_4:4515-6830 P35061   Histone H2A
## 4   ntLink_4:7096-7859 P84239    Histone H3
## 5   ntLink_4:8474-9669 P35061   Histone H2A
## 6 ntLink_4:11162-11925 P84239    Histone H3
##                                     Organism Gene.Ontology..biological.process.
## 1          Acropora formosa (Staghorn coral)                                   
## 2 Urechis caupo (Innkeeper worm) (Spoonworm)                                   
## 3          Acropora formosa (Staghorn coral)                                   
## 4 Urechis caupo (Innkeeper worm) (Spoonworm)                                   
## 5          Acropora formosa (Staghorn coral)                                   
## 6 Urechis caupo (Innkeeper worm) (Spoonworm)                                   
##                                            Gene.Ontology.IDs
## 1 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
## 2 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
## 3 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
## 4 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
## 5 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
## 6 GO:0000786; GO:0003677; GO:0005634; GO:0030527; GO:0046982
```

``` r
# Looks good!
```

This file shows each gene as it's genomic location. We want to use gene IDs to associate genes, so add gene IDs to this annotation table

Read in file that associates each mRNA genomic location with corresponding gene ID

``` r
mRNA_FUNids <- read.table("../output/15-Apul-annotate-UTRs/Apul-mRNA-FUNids.txt", header=FALSE, col.names=c("location", "type", "mRNA_ID", "gene_ID", "product"), sep="\t")

# Remove unwanted text from parent column
mRNA_FUNids$gene_ID <- gsub("Parent=", "", mRNA_FUNids$gene_ID)
# Only need to keep mRNA location and gene ID
mRNA_FUNids <- mRNA_FUNids %>% dplyr::select(location, gene_ID)
```

join with annotation file

``` r
# join
annot <- left_join(annot_locations, mRNA_FUNids, by = c("V1" = "location"))

# ensure there are no duplicate rows
annot <- annot %>% distinct()
```

## 1.2 Set up gene2GO object

Want to isolate a list of GO terms per gene

``` r
gene2go <- annot %>% filter(!is.na(Gene.Ontology.IDs)) %>% dplyr::select(gene_ID, Gene.Ontology.IDs)
gene2go <- gene2go %>% dplyr::rename(GO.ID = Gene.Ontology.IDs)

gene2go_list <- setNames(
  strsplit(as.character(gene2go$GO.ID), ";"), 
  gene2go$gene_ID
)
```

Note: I think this means genes that had a Uniprot ID but no GO terms are excluded from this analysis

## 1.3 Define reference set

Define reference set of genes. This should be all genes *found in our samples*, NOT all genes in the A.pulchra genome. Some genes (e.g., reproduction pathways) may not be found/expected in our samples for valid biological reasons.

``` r
# Read in counts matrix
Apul_counts <- read.csv("../output/07-Apul-Hisat/Apul-gene_count_matrix.csv")
# Exclude genes with all 0 counts
Apul_counts <- Apul_counts[rowSums(Apul_counts[, 2:6]) != 0, ]

# Select gene IDs of the genes present in our samples
all_genes <- Apul_counts$gene_id
length(all_genes)
```

```         
## [1] 33624
```

So we have a reference set of 33624 genes present in our samples.

## 1.4 Read in PCC/miranda data

This is a table of all putative miRNA-mRNA binding predicted by miRanda, plus Pearsons correlation coefficients for coexpression of each putative binding pair.

``` r
data <- read.csv("../output/09-Apul-mRNA-miRNA-interactions/miranda_PCC_miRNA_mRNA.csv")
head(data)
```

```         
##   X         miRNA       mRNA    PCC.cor   p_value adjusted_p_value score energy
## 1 1  Cluster_5981 FUN_028147  0.6825537 0.2041707        0.9986496   146 -22.19
## 2 2 Cluster_15340 FUN_013332  0.6371070 0.2476393        0.9986496   158 -23.15
## 3 3  Cluster_5981 FUN_041253 -0.2250869 0.7158492        0.9986496   153 -20.50
## 4 4  Cluster_3366 FUN_010827  0.3671005 0.5433145        0.9986496   163 -22.14
## 5 5  Cluster_3367 FUN_010827  0.5369304 0.3507987        0.9986496   163 -22.14
## 6 6 Cluster_15340 FUN_003342  0.1096213 0.8607058        0.9986496   154 -20.65
##   query_start_end subject_start_end total_bp_shared query_similar
## 1            2 21           185 209              21        66.67%
## 2            2 20           198 220              19        68.42%
## 3            2 21           699 719              19        73.68%
## 4            2 18           346 368              16        81.25%
## 5            2 18           346 368              16        81.25%
## 6            2 20           562 585              20        65.00%
##   subject_similar
## 1          71.43%
## 2          84.21%
## 3          73.68%
## 4          93.75%
## 5          93.75%
## 6          80.00%
```

Set function to select genes of interest (ie those that have pvalue \< 0.05)

``` r
topDiffGenes <- function(allScore) {
return(allScore < 0.05)}
```

# 2 FA of all miRNA targets

Functional annotation of all putative miRNA targets

``` r
cor_bind_FA <- left_join(data, annot, by = c("mRNA" = "gene_ID")) %>% distinct()

nrow(cor_bind_FA)
```

```         
## [1] 4657
```

``` r
nrow(cor_bind_FA[!is.na(cor_bind_FA$Gene.Ontology.IDs),])
```

```         
## [1] 923
```

Of the 4657 putative miRNA targets predicted by miRanda, 923 have available annotations

``` r
sig_cor_bind_FA <- cor_bind_FA[cor_bind_FA$p_value < 0.05,]

nrow(sig_cor_bind_FA)
```

```         
## [1] 266
```

``` r
nrow(sig_cor_bind_FA[!is.na(sig_cor_bind_FA$Gene.Ontology.IDs),])
```

```         
## [1] 52
```

Of the 266 putative miRNA targets predicted by miRanda that are also have significantly correlated expression, only 52 have available annotations. This is an average of 1-2 annotated targets per miRNA. This unfortunately means **functional enrichment analysis will likely be uninformative for most groups of significantly coexpressed targets.**

Save

``` r
write.csv(cor_bind_FA, "../output/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment/miRNA_targets_FA.csv")
write.csv(sig_cor_bind_FA, "../output/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment/miRNA_sig_cor_targets_FA.csv")
```

# 3 FE of specific miRNA's targets (all targets)

Create topGO function for use with miRNA names

``` r
miRNA_topGO_FE <- function(miRNA.name, input_interactions) {
  
  #Isolate genes in our input module of interest
  interacting_genes <- input_interactions %>%
    filter(miRNA == miRNA.name) %>%
    pull(mRNA)
  
  if (length(interacting_genes) > 0) {
    # Create factor for all reference genes, where 1 represents module membership and 0 means the gene is not in module of interest
    gene_list <- factor(as.integer(all_genes %in% interacting_genes))
    names(gene_list) <- all_genes
    str(gene_list)
    
    ## Biological Process ##
    # Create topGO object
    GO_BP <- new("topGOdata", 
                ontology = "BP", # Biological Process
                allGenes = gene_list,
                annot = annFUN.gene2GO, 
                gene2GO = gene2go_list,
                geneSel=topDiffGenes)
    
    # Run GO enrichment test
    GO_BP_FE <- runTest(GO_BP, algorithm = "weight01", statistic = "fisher")
    # View the results
    GO_BP_results <- GenTable(GO_BP, Fisher = GO_BP_FE, orderBy = "Fisher",  topNodes = 100, numChar = 51)
    # Filter by significant results
    GO_BP_results$Fisher<-as.numeric(GO_BP_results$Fisher)
    GO_BP_results_sig<-GO_BP_results[GO_BP_results$Fisher<0.05,]
    
    
    ## Molecular Function ##
    # Create topGO object
    GO_MF <- new("topGOdata", 
                ontology = "MF", # Molecular Function
                allGenes = gene_list,
                annot = annFUN.gene2GO, 
                gene2GO = gene2go_list,
                geneSel=topDiffGenes)
    
    # Run GO enrichment test
    GO_MF_FE <- runTest(GO_MF, algorithm = "weight01", statistic = "fisher")
    # View the results
    GO_MF_results <- GenTable(GO_MF, Fisher = GO_MF_FE, orderBy = "Fisher",  topNodes = 100, numChar = 51)
    # Filter by significant results
    GO_MF_results$Fisher<-as.numeric(GO_MF_results$Fisher)
    GO_MF_results_sig<-GO_MF_results[GO_MF_results$Fisher<0.05,]
  
    # Return
    # Add type column only if results exist
    if (nrow(GO_BP_results_sig) > 0) {
      GO_BP_results_sig$type <- "Biological.Process"
    }
    if (nrow(GO_MF_results_sig) > 0) {
      GO_MF_results_sig$type <- "Molecular.Function"
    }
    GO_results <- rbind(GO_BP_results_sig, GO_MF_results_sig)
    print(GO_results)
  }
}
```

Loop through all miRNA and run functional enrichment on the miRNA's targets (all predicted targets)

``` r
interacting_miRNAs <- unique(cor_bind_FA$miRNA) %>% na.omit
results_all_targets <- NULL  # initialize empty df

for(miRNA in interacting_miRNAs) {
  
  # Run topGO enrichment function
  miRNA_results <- miRNA_topGO_FE(miRNA, cor_bind_FA)
  
  # Only keep results if not empty
  if (nrow(miRNA_results) > 0) {
    
    # Add the miRNA source column
    miRNA_results$miRNA <- miRNA

    # Bind to the accumulating results data frame
    results_all_targets <- rbind(results_all_targets, miRNA_results)
  }
}
```

``` r
head(results_all_targets)
```

```         
##        GO.ID                                                   Term Annotated
## 1 GO:0001745                             compound eye morphogenesis         3
## 2 GO:0001933         negative regulation of protein phosphorylation         5
## 3 GO:0009734                      auxin-activated signaling pathway         5
## 4 GO:0004459                       L-lactate dehydrogenase activity         1
## 5 GO:0004760                  serine-pyruvate transaminase activity         1
## 6 GO:0004742 dihydrolipoyllysine-residue acetyltransferase activ...         1
##   Significant Expected Fisher               type        miRNA
## 1           1     0.03  0.027 Biological.Process Cluster_5981
## 2           1     0.05  0.045 Biological.Process Cluster_5981
## 3           1     0.05  0.045 Biological.Process Cluster_5981
## 4           1     0.01  0.012 Molecular.Function Cluster_5981
## 5           1     0.01  0.012 Molecular.Function Cluster_5981
## 6           1     0.01  0.012 Molecular.Function Cluster_5981
```

Save results

``` r
write.csv(results_all_targets, "../output/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment/miRNA_all_targets_topGO_FE.csv")
```

# 4 FE of specific miRNA's targets (significant cor targets)

Loop through all miRNA and run functional enrichment on the miRNA's significantly correlated targets

``` r
interacting_miRNAs_sig <- unique(sig_cor_bind_FA$miRNA) %>% na.omit
results_sig_cor_targets <- NULL  # initialize empty df

for(miRNA in interacting_miRNAs_sig) {
  
  # Run topGO enrichment function
  miRNA_results <- miRNA_topGO_FE(miRNA, sig_cor_bind_FA)
  
  # Only keep results if not empty
  if (nrow(miRNA_results) > 0) {
    
    # Add the miRNA source column
    miRNA_results$miRNA <- miRNA

    # Bind to the accumulating results data frame
    results_sig_cor_targets <- rbind(results_sig_cor_targets, miRNA_results)
  }
}
```

``` r
head(results_sig_cor_targets)
```

```         
##        GO.ID                                           Term Annotated
## 1 GO:0001947                                  heart looping         4
## 2 GO:0003341                                cilium movement        22
## 3 GO:0004842         ubiquitin-protein transferase activity        35
## 4 GO:0002221 pattern recognition receptor signaling pathway        11
## 5 GO:0004252             serine-type endopeptidase activity        53
## 6 GO:0001933 negative regulation of protein phosphorylation         5
##   Significant Expected Fisher               type         miRNA
## 1           1     0.00 0.0028 Biological.Process Cluster_19193
## 2           1     0.02 0.0150 Biological.Process Cluster_10051
## 3           1     0.02 0.0240 Molecular.Function Cluster_10051
## 4           1     0.01 0.0077 Biological.Process Cluster_16409
## 5           1     0.04 0.0370 Molecular.Function Cluster_16409
## 6           1     0.00 0.0035 Biological.Process  Cluster_3250
```

Save results

``` r
write.csv(results_sig_cor_targets, "../output/09.1-Apul-mRNA-miRNA-interactions-functional-enrichment/miRNA_sig_cor_targets_topGO_FE.csv")
```
