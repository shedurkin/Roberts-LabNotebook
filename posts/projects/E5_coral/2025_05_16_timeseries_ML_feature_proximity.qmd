---
title: "Timeseries molecular: A.pul, multiomic features to predict expression. Machine learning -- Feature Proximity"
author: "Kathleen Durkin"
date: "2025-05-16"
categories: ["E5-coral"]
format:
  html:
    toc: true
execute: 
  eval: FALSE
engine: knitr
bibliography: ../../../references.bib
---

Load libraries

```{r}
library(dplyr)
library(tidyverse)
```

# Load

Load feature gtfs

```{r, engine='bash'}
# A.pulchra genome gtf
curl -L https://github.com/urol-e5/timeseries_molecular/raw/refs/heads/main/D-Apul/output/02.20-D-Apul-RNAseq-alignment-HiSat2/Apulchra-genome.stringtie.gtf -o ./output/2025_05_16_timeseries_ML_feature_proximity/Apulchra-genome.stringtie.gtf

# A.pulchra lncRNA gtf
curl -L https://github.com/urol-e5/timeseries_molecular/raw/refs/heads/main/D-Apul/output/08-Apul-lncRNA/lncRNAs.gtf -o ./output/2025_05_16_timeseries_ML_feature_proximity/lncRNA.gtf

# A.pulchra sRNA gff3 (contains all sRNA with notations -- will need to filter to retain only valid miRNA)
curl -L https://github.com/urol-e5/timeseries_molecular/raw/refs/heads/main/D-Apul/output/04-Apul-sRNA-discovery-ShortStack/ShortStack_out/Results.gff3 -o ./output/2025_05_16_timeseries_ML_feature_proximity/sRNA.gff3
```

```{r, engine='bash'}
# A.pulchra CpG gtf (DNA methylation)
# Prohibitively large number of total CpGs, so will only load CpGs we retained for ML model
# Note that this is a counts table, but CpG coordinates are stored in their names
curl -L https://github.com/urol-e5/timeseries_molecular/raw/refs/heads/main/D-Apul/output/22.2-Apul-multiomic-machine-learning/filtered-WGBS-CpG-counts.csv -o ./output/2025_05_16_timeseries_ML_feature_proximity/filtered-WGBS-CpG-counts.csv

```

Load df of well-predicted energetic state genes and their respective top predictors

```{r, engine='bash'}
curl -L https://github.com/urol-e5/timeseries_molecular/raw/refs/heads/main/D-Apul/output/22.3-Apul-multiomic-machine-learning-byTP/top_predictors.csv -o ./output/2025_05_16_timeseries_ML_feature_proximity/top_predictors.csv
```

Convert the predictor csv to a tab-delimited file (easier to use with the gtf/gffs in bash)

```{r, engine='bash'}
cd ./output/2025_05_16_timeseries_ML_feature_proximity

awk -F',' '{
    for (i = 1; i <= NF; i++) {
        gsub(/^"|"$/, "", $i)  # remove surrounding double quotes
        gsub(/""/, "\"", $i)   # handle escaped quotes if needed
    }
    OFS = "\t"
    print $0
}' top_predictors.csv > top_predictors.tab
```

# Isolate

Filter genome gtf to obtain gtf of well-predicted genes

```{r, engine='bash'}
cd ./output/2025_05_16_timeseries_ML_feature_proximity

# Will only keep genome gtf entries that contain one of the genes listed in top_predictors.tab

# Extract column 3 values (well-predicted genes) from the reference file, skipping the header
tail -n +2 top_predictors.tab | cut -f3 | sort -u > well_predicted.txt


# Filter the GTF file using grep
grep -Ff well_predicted.txt Apulchra-genome.stringtie.gtf > well-predicted-genes.gtf

# Remove intermediate file
rm well_predicted.txt
```

Filter lncRNA gtf to isolate those that are top predictors of our genes of interest

```{r, engine='bash'}
cd ./output/2025_05_16_timeseries_ML_feature_proximity

# Will only keep genome gtf entries that contain one of the lncRNA listed in top_predictors.tab

# Extract column 1 (predictors), skip the header, and filter for entries containing 'lncRNA'
tail -n +2 top_predictors.tab | cut -f1 | grep 'lncRNA' | sort -u > predictive_lncRNA.txt

# Use grep to filter the GTF file based on these patterns
grep -Fwf predictive_lncRNA.txt lncRNA.gtf > predictive_lncRNA.gtf

# Remove intermediate file
rm predictive_lncRNA.txt
```

Filter miRNA gff3 to obtain a gff of all miRNA and a gff of our predicitve miRNA

```{r, engine='bash'}
cd ./output/2025_05_16_timeseries_ML_feature_proximity

# Only keep sRNA entries that are valid miRNA (MIRNA=Y)
grep 'MIRNA=Y' sRNA.gff3 > mirna.gff3

# Extract miRNA that are top predictors
# Extract column 1 (predictors), skip the header, and filter for entries containing 'Cluster'
tail -n +2 top_predictors.tab | cut -f1 | grep 'Cluster' | sort -u > predictive_miRNA.txt

# Use grep to filter the GTF file based on these patterns
grep -Fwf predictive_miRNA.txt sRNA.gff3 > predictive_miRNA.gff3

# Remove intermediate file
rm predictive_miRNA.txt
```

From the CpG counts matrix, obtain a bed file of all considered CpGs and a bed file of predictive CpGs.

```{r}
# Read in csv and isolate the CpG names
CpG_counts <- read.csv("./output/2025_05_16_timeseries_ML_feature_proximity/filtered-WGBS-CpG-counts.csv")

all_CpGs <- CpG_counts$X

# Extract chromosome and position using regex
chrom <- sub("^CpG_(.+)_\\d+$", "\\1", all_CpGs)
pos   <- as.numeric(sub(".*_(\\d+)$", "\\1", all_CpGs))

# Construct BED-format data frame
bed <- data.frame(
  chrom = chrom,
  start = pos - 1,    # BED is 0-based
  end   = pos,
  name  = all_CpGs         # name column
)

# Write to BED file
write.table(bed, file = "./output/2025_05_16_timeseries_ML_feature_proximity/CpGs.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
```

```{r, engine='bash'}
cd ./output/2025_05_16_timeseries_ML_feature_proximity

# Will only keep CpG bed entries that contain one of the CpGs listed in top_predictors.tab

# Extract column 1 (predictors), skip the header, and filter for entries containing 'lncRNA'
tail -n +2 top_predictors.tab | cut -f1 | grep 'CpG' | sort -u > predictive_CpGs.txt

# Use grep to filter the GTF file based on these patterns
grep -Fwf predictive_CpGs.txt CpGs.bed > predictive_CpGs.bed

# Remove intermediate file
rm predictive_CpGs.txt
```

# Gene feature files

I also want a feature file for each gene, that contains coordinate information for that gene and its top predictors.

```{r}
#Load predictor table
preds <- read.table("./output/2025_05_16_timeseries_ML_feature_proximity/top_predictors.tab", header=TRUE)
```

```{r}
#Load annotations
all_genes_gtf <- read.table("./output/2025_05_16_timeseries_ML_feature_proximity/Apulchra-genome.stringtie.gtf", sep="\t", col.names=c("scaffold", "V2", "V3", "start", "end", "V6", "V7", "V8", "info"))
all_lncrna_gtf <- read.table("./output/2025_05_16_timeseries_ML_feature_proximity/lncrna.gtf", sep="\t", col.names=c("scaffold", "V2", "V3", "start", "end", "V6", "V7", "V8", "info"))
all_mirna_gff3 <- read.table("./output/2025_05_16_timeseries_ML_feature_proximity/miRNA.gff3", sep="\t", col.names=c("scaffold", "V2", "V3", "start", "end", "V6", "V7", "V8", "info"))
all_cpg_bed <- read.table("./output/2025_05_16_timeseries_ML_feature_proximity/CpGs.bed", col.names=c("scaffold", "start", "end", "info"))

#For non-bed files, need to convert 1-start positions to 0-start positions
all_genes_gtf$start_bed <- all_genes_gtf$start - 1
all_lncrna_gtf$start_bed <- all_lncrna_gtf$start - 1
all_mirna_gff3$start_bed <- all_mirna_gff3$start - 1
all_cpg_bed$start_bed <- all_cpg_bed$start

# Column with just the feature ID
all_genes_gtf$ID <- str_extract(all_genes_gtf$info, "(?<=ref_gene_id )[^;]+")
all_lncrna_gtf$ID <- str_extract(all_lncrna_gtf$info, "(?<=gene_id )[^;]+")
all_mirna_gff3$ID <- str_extract(all_mirna_gff3$info, "(?<=ID=)[^;]+")
all_cpg_bed$ID <- all_cpg_bed$info


# Remove superfluous features (e.g. gene exon notes, miRNA star and precursor) and save bed style columns
all_genes_bed <- all_genes_gtf[all_genes_gtf$V3 == "transcript",] %>% select(scaffold, start_bed, end, ID)
all_lncrna_bed <- all_lncrna_gtf %>% select(scaffold, start_bed, end, ID)
all_mirna_bed <- all_mirna_gff3%>% select(scaffold, start_bed, end, ID)
all_cpg_bed <- all_cpg_bed %>% select(scaffold, start_bed, end, ID)
```

```{r}
# For each unique feature
for (feat in unique(preds$Feature)) {

  # Get predictors for this feature
  pred_ids <- preds %>% filter(Feature == feat) %>% pull(Predictor)

  # Group predictors by type using pattern matching (still grepl for this part)
  lnc_ids <- pred_ids[grepl("^lncRNA_", pred_ids)]
  mir_ids <- pred_ids[grepl("^Cluster_", pred_ids)]
  cpg_ids <- pred_ids[grepl("^CpG_", pred_ids)]

  # Get ranges for feature and its predictors using exact ID matching
  feat_range <- all_genes_bed %>% filter(ID == feat)
  lnc_ranges <- if (length(lnc_ids) > 0) all_lncrna_bed %>% filter(ID %in% lnc_ids) else NULL
  mirna_ranges <- if (length(mir_ids) > 0) all_mirna_bed %>% filter(ID %in% mir_ids) else NULL
  cpg_ranges <- if (length(cpg_ids) > 0) all_cpg_bed %>% filter(ID %in% cpg_ids) else NULL

  # Combine all into one BED-like table
  bed_df <- dplyr::bind_rows(
    as.data.frame(feat_range) %>% select(scaffold, start_bed, end, ID),
    as.data.frame(lnc_ranges),
    as.data.frame(mirna_ranges),
    as.data.frame(cpg_ranges)
  )

  # Write to BED
  out_file <- paste0("./output/2025_05_16_timeseries_ML_feature_proximity/", feat, "_with_predictors.bed")
  write.table(bed_df, out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
}
```

# Feature files for binding-based interactions

Read in cytoscape edges file, which shows all miRNA interactions with binding and PCC information

```{r}
interactions <- read.csv("./output/2025_04_28_timeseries_cytoscape_files/edges_PCC_0.5_timeseries_miRNA_lncRNA_genes.csv") %>% select(source, target, PCC.cor) %>% distinct()
```

```{r}
for (mirna in unique(interactions$source)) {
  # Get interactions for this feature
  inter_ids <- interactions %>% filter(source == mirna) %>% pull(target)

  # Group interactions by type
  lnc_ids <- inter_ids[grepl("^lncRNA_", inter_ids)]
  gene_ids <- inter_ids[grepl("^FUN_", inter_ids)]

  # Get ranges for feature and its predictors using exact matches
  mirna_range <- all_mirna_bed %>% filter(ID == mirna)
  
  lnc_ranges <- if (length(lnc_ids) > 0) lncrna_bed %>% filter(ID %in% lnc_ids) else NULL
  gene_ranges <- if (length(gene_ids) > 0) all_genes_bed %>% filter(ID %in% gene_ids) else NULL

  # Combine all into one BED-like table
  bed_df <- dplyr::bind_rows(
    as.data.frame(mirna_range),
    as.data.frame(lnc_ranges),
    as.data.frame(gene_ranges)
  )

  # Write to BED
  out_file <- paste0("./output/2025_05_16_timeseries_ML_feature_proximity/", mirna, "_with_interactions.bed")
  write.table(bed_df, out_file, row.names = FALSE, col.names = FALSE, quote = FALSE)
}
```
