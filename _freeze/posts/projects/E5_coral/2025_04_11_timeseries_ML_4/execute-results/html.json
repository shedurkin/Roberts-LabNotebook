{
  "hash": "a354fb1b3e3eff2442b49d46e779d5dc",
  "result": {
    "markdown": "---\ntitle: \"Timeseries molecular: A.pul phenotype and gene/miRNA machine learning -- Part 4\"\nauthor: \"Kathleen Durkin\"\ndate: \"2025-04-11\"\ncategories: [\"E5-coral\"]\nformat:\n  html:\n    toc: true\nexecute: \n  eval: FALSE\nengine: knitr\nbibliography: ../../../references.bib\n---\n\n\nRequested a list of GO terms related to energy usage and storage from ChatGPT4o:\\\n\\\n**Energy Usage / Energy Production:**\n\n| GO Term        | Term Name                                          | Notes                                                             |\n|---------------|-------------------------|--------------------------------|\n| **GO:0006096** | **Glycolysis**                                     | Breakdown of glucose to produce ATP.                              |\n| **GO:0006091** | **Generation of precursor metabolites and energy** | Broad, covers glycolysis, TCA cycle, etc.                         |\n| **GO:0006099** | **Tricarboxylic acid cycle (TCA cycle)**           | AKA Krebs cycle --- key ATP-generating pathway.                   |\n| **GO:0006119** | **Oxidative phosphorylation**                      | ATP generation using the mitochondrial electron transport chain.  |\n| **GO:0006635** | **Fatty acid beta-oxidation**                      | Breaks down fats to feed into energy production.                  |\n| **GO:0009150** | **Purine ribonucleotide biosynthetic process**     | Important for making ATP and other nucleotides (energy carriers). |\n| **GO:0030163** | **Protein catabolic process**                      | Energy extraction from proteins, especially during starvation.    |\n\n**Energy Storage:**\n\n| GO Term        | Term Name                                  | Notes                                                            |\n|----------------|----------------------|----------------------------------|\n| **GO:0008610** | **Lipid biosynthetic process**             | Making lipids for energy storage.                                |\n| **GO:0045721** | **Negative regulation of gluconeogenesis** | Helps switch from producing glucose to storing it.               |\n| **GO:0046467** | **Membrane lipid catabolic process**       | Mobilizing stored energy from lipid stores.                      |\n| **GO:0016042** | **Lipid catabolic process**                | General term for fat breakdown.                                  |\n| **GO:0005975** | **Carbohydrate metabolic process**         | Storage of energy as glycogen or starch (depending on organism). |\n| **GO:0045722** | **Positive regulation of glycolysis**      | Promotes glucose usage over storage when energy is needed.       |\n| **GO:0042594** | **Response to starvation**                 | Triggering the usage of energy stores (lipids, proteins, etc.).  |\n\n**Bonus Terms (helpful if you want full coverage):**\n\n| GO Term        | Term Name                                 | Notes                                               |\n|----------------|-------------------------|-------------------------------|\n| **GO:0046034** | **ATP metabolic process**                 | Directly handling the cell's energy currency.       |\n| **GO:0006094** | **Gluconeogenesis**                       | Building glucose for later use or emergency supply. |\n| **GO:0006629** | **Lipid metabolic process**               | Umbrella term for both storage and usage of lipids. |\n| **GO:0032869** | **Cellular response to insulin stimulus** | Insulin controls whether energy is stored or used.  |\n| **GO:0006006** | **Glucose metabolic process**             | General term covering breakdown and storage.        |\n\nThen generated a gene set of genes in our time series Apul reads that are annotated with at least one of these terms. This gene set was used in the ML model.\\\n\\\n[Full code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets.Rmd)\\\n[Full rendered code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets.md)\n\n# 7 Energy Usage/Storage (GO terms)\n\n## 7.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA expression\nmodels_energy_GO <- train_models(energy_GO_pcs, vsd_miRNA)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_energy_GO <- get_feature_importance(models_energy_GO)\nhead(feature_importance_energy_GO, 20)  # Top predictive miRNA\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature       MeanImportance\n##    <chr>                  <dbl>\n##  1 Cluster_17173         0.222 \n##  2 Cluster_5516          0.202 \n##  3 Cluster_17623         0.192 \n##  4 Cluster_2372          0.184 \n##  5 Cluster_17192         0.181 \n##  6 Cluster_9420          0.170 \n##  7 Cluster_9786          0.169 \n##  8 Cluster_14146         0.164 \n##  9 Cluster_5517          0.150 \n## 10 Cluster_14605         0.142 \n## 11 Cluster_3301          0.140 \n## 12 Cluster_1819          0.129 \n## 13 Cluster_17186         0.105 \n## 14 Cluster_14165         0.104 \n## 15 Cluster_10452         0.0935\n## 16 Cluster_9366          0.0924\n## 17 Cluster_4752          0.0864\n## 18 Cluster_4036          0.0862\n## 19 Cluster_1865          0.0838\n## 20 Cluster_3226          0.0816\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_energy_GO <- evaluate_model_performance(models_energy_GO, energy_GO_pcs, vsd_miRNA)\nsummary(performance_results_energy_GO$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.1121  0.5775  0.6554  0.6060  0.7653  0.9519      13\n```\n\n## 7.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_energy_GO <- feature_importance_energy_GO %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_energy_GO, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA as Predictive Features\",\n       x = \"miRNA\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-53-1.png)\n\n``` r\nggplot(performance_results_energy_GO, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_energy_GO$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 13 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-54-1.png)\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_energy_GO <- pca_energy_GO$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_energy_GO_df <- as.data.frame(loadings_energy_GO) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"energy_GO_PC\", values_to = \"Loading\")\n\n# View top CpGs contributing most to each PC\ntop_genes_energy_GO <- loadings_energy_GO_df %>%\n  group_by(energy_GO_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 10 CpGs per PC\n\nprint(top_genes_energy_GO)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   energy_GO_PC [40]\n##    gene       energy_GO_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_028200 PC1           -0.115\n##  2 FUN_040444 PC1           -0.113\n##  3 FUN_017915 PC1           -0.112\n##  4 FUN_001396 PC1            0.109\n##  5 FUN_026618 PC1            0.108\n##  6 FUN_029673 PC1            0.107\n##  7 FUN_023596 PC1           -0.107\n##  8 FUN_000370 PC1            0.106\n##  9 FUN_039293 PC1           -0.106\n## 10 FUN_001160 PC1            0.105\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_energy_GO <- performance_results_energy_GO$PC[which.max(performance_results_energy_GO$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_energy_GO <- energy_GO_pcs[[best_pc_energy_GO]]\npredicted_values_energy_GO <- predict(models_energy_GO[[best_pc_energy_GO]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_energy_GO <- data.frame(\n  Actual = actual_values_energy_GO,\n  Predicted = predicted_values_energy_GO\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_energy_GO, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_energy_GO),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_energy_GO), y = max(predicted_values_energy_GO), \n           label = paste(\"R² =\", round(max(performance_results_energy_GO$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-56-1.png)\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_energy_GO%>%filter(energy_GO_PC==best_pc_energy_GO))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   energy_GO_PC [1]\n##    gene       energy_GO_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_042982 PC3           0.176 \n##  2 FUN_008385 PC3           0.140 \n##  3 FUN_036246 PC3           0.139 \n##  4 FUN_014563 PC3           0.134 \n##  5 FUN_011723 PC3          -0.131 \n##  6 FUN_031898 PC3           0.124 \n##  7 FUN_015086 PC3           0.123 \n##  8 FUN_037137 PC3          -0.121 \n##  9 FUN_015261 PC3           0.120 \n## 10 FUN_023676 PC3           0.119 \n## 11 FUN_013363 PC3          -0.118 \n## 12 FUN_014844 PC3          -0.118 \n## 13 FUN_022926 PC3          -0.109 \n## 14 FUN_037111 PC3          -0.107 \n## 15 FUN_014565 PC3           0.104 \n## 16 FUN_040116 PC3          -0.104 \n## 17 FUN_022700 PC3           0.101 \n## 18 FUN_029437 PC3           0.101 \n## 19 FUN_007022 PC3          -0.100 \n## 20 FUN_022927 PC3          -0.0997\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above line in plot\nall_pcs_energy_GO <- performance_results_energy_GO %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_energy_GO) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- energy_GO_pcs[[pc]]\n  predicted_values <- predict(models_energy_GO[[pc]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_energy_GO[performance_results_energy_GO$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-58-1.png)\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-58-2.png)\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-58-3.png)\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-58-4.png)\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_energy_GO) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_energy_GO[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA Predictors for\", pc),\n         x = \"miRNA\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-59-1.png)![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-59-2.png)![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-59-3.png)![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-59-4.png)\n\n# 8 Compare\n\nVisualize the relative importance of miRNA in predicting expression for these different gene sets:\n\n``` r\n# Perfomr min-max normalization on the mean importance of miRNA for each group\n# This will place all along a 0-1 range for comparison purposes\nnormalize <- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\n\n# Normalize\ntop_features_Host_AFDW$MeanImportance_norm <- normalize(top_features_Host_AFDW$MeanImportance)\ntop_features_Am$MeanImportance_norm <- normalize(top_features_Am$MeanImportance)\ntop_features_ATP_prod_GO$MeanImportance_norm <- normalize(top_features_ATP_prod_GO$MeanImportance)\ntop_features_energy_GO$MeanImportance_norm <- normalize(top_features_energy_GO$MeanImportance)\n\n# Add group labels\ntop_features_Host_AFDW <- top_features_Host_AFDW %>% mutate(group = \"Host_AFDW\")\ntop_features_Am <- top_features_Am %>% mutate(group = \"Am\")\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO %>% mutate(group = \"ATP_prod_GO\")\ntop_features_energy_GO <- top_features_energy_GO %>% mutate(group = \"energy_GO\")\n\n# Set rows in same order\ntop_features_Am <- top_features_Am[rownames(top_features_Host_AFDW),]\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO[rownames(top_features_Host_AFDW),]\ntop_features_energy_GO <- top_features_energy_GO[rownames(top_features_Host_AFDW),]\n\n# Combine\nall_gene_sets <- bind_rows(top_features_Host_AFDW, top_features_Am, top_features_ATP_prod_GO, top_features_energy_GO)\n# Remove raw mean importance\nall_gene_sets <- all_gene_sets %>% select(!MeanImportance)\n\n# Wide format: rows = miRNAs, columns = groups\nheatmap_df <- all_gene_sets %>%\n  pivot_wider(names_from = group, values_from = MeanImportance_norm)\n\nheatmap_df <- as.data.frame(heatmap_df)\n\n# Melt into long format for ggplot\nheatmap_long <- melt(heatmap_df, id.vars = \"Feature\")\n\nggplot(heatmap_long, aes(x = variable, y = Feature, fill = value)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme_minimal() +\n  labs(x = \"Group\", y = \"Feature\", fill = \"Importance\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-60-1.png)\n\nCluster by miRNA importance\n\n``` r\n# Make Feature column the rownames and convert to matrix\nrownames(heatmap_df) <- heatmap_df$Feature\nheatmap_matrix <- as.matrix(heatmap_df[, -1])  # Removes the 'Feature' column\n\npheatmap(\n  heatmap_matrix, \n  cluster_rows = TRUE,  # Clustering miRNAs (rows) by similarity in importance\n  cluster_cols = TRUE,  # Clustering groups (columns)\n  scale = \"none\",  # No scaling (since data is already normalized)\n  show_rownames = TRUE,  # Show miRNA names\n  show_colnames = TRUE,  # Show group names\n  color = colorRampPalette(c(\"white\", \"red\"))(100),  # Red gradient for importance\n  main = \"miRNAs Importance Across Groups\"  # Title of the heatmap\n)\n```\n\n![](./images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files_2/figure-gfm/unnamed-chunk-61-1.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}