{
  "hash": "8710a3842e7d30e2ba115d795f925c91",
  "result": {
    "markdown": "---\ntitle: \"Timeseries molecular: A.pul phenotype and gene/miRNA machine learning -- Part 3\"\nauthor: \"Kathleen Durkin\"\ndate: \"2025-04-07\"\ncategories: [\"E5-coral\"]\nformat:\n  html:\n    toc: true\nexecute: \n  eval: FALSE\nengine: knitr\nbibliography: ../../../references.bib\n---\n\n\nNow running model using miRNA as predictors, and specific sets of genes as response.\n\n[Code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets.Rmd)\\\n[Rendered code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets.md)\n\nI used miRNA expression to predict expression of three different gene sets:\n\n-   host biomass (\"Host_AFDW\"):\n    -   Genes contained in WGCNA modules significnatly correlated with host biomass.\n    -   793 genes (all retained through counts filtering)\n-   symbiont photosynthesis (\"Am\")\n    -   Genes contained within WGCNA modules significantly correlated with symbiont photosynthesis\n    -   5746 genes (all retained through counts filtering)\n-   List of GO terms provided by Steven (\"ATP_production_GO\")\n    -   Genes annotated with at least one of the four GO terms, related to ATP production\n    -   22 genes (all retained through counts filtering)\n\nNote that the gene set of STP production GO terms contains two genes (`FUN_014565`, `FUN031686`) that are also present in the symbiont photosynthesis list.\n\nNote that all gene sets were reduced to PCs before use.\n\n# Results\n\n### **High model performance for all three sets.**\n\nHost biomass:\\\n![](https://github.com/urol-e5/timeseries_molecular/blob/b88b583d1dd33f9843d4edf18f169e4f83e93ef8/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-23-1.png?raw=true)\n\nSymbiont photosynthesis:\\\n![](https://github.com/urol-e5/timeseries_molecular/blob/b88b583d1dd33f9843d4edf18f169e4f83e93ef8/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-33-1.png?raw=true)\n\nATP production GO terms:\\\n![](https://github.com/urol-e5/timeseries_molecular/blob/b88b583d1dd33f9843d4edf18f169e4f83e93ef8/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-43-1.png?raw=true)\n\n### A selection of miRNA are predictively important\n\nWe can also look at the predictive importance of individual miRNA. Summarizing across all three gene sets, we see the following (note: mean importance is min-max normalized to sit on same 0-1 scale):\n\n![](https://github.com/urol-e5/timeseries_molecular/blob/b88b583d1dd33f9843d4edf18f169e4f83e93ef8/D-Apul/code/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-50-1.png?raw=true)\n\nA couple of interesting things pop out here!\n\nFirst, most miRNA are contributing to model performance in all three gene sets. Generally speaking, host biomass has the most miRNA that are highly important to predicting gene expression (it has the most dark red bars). In contrast **symbiont photosynthesis and ATP production have only a couple of miRNA that are highly important**. For the ATP group this isn't too surprising since the model includes only 22 genes. However, the photosynthesis gene set contains almost 6000 genes, so the limited number of important miRNA is really interesting!\n\nThere's also interesting patterns of overlap. **All of the miRNA important to predicting symbiont photosynthesis are also important to predicting host biomass** Does this suggest these miRNA are involved in energy storage?\\\nIn contrast, the miRNA most important to predicting the ATP-production genes are of limited important to the photosynthesis and host biomass sets.\n\n# Notes/observations:\n\n-   Rerunning the code without changes yields slightly different results each time, suggesting there's a random component somewhere in the model training/prediction.\n\n    -   Look more into how this model works and how predictions/accuracy may vary\n\n    -   consider bootstrapping or something similar to account for variation\n\n-   Think vst should be applied on all genes before isolating specific gene sets of interest, but should check with Ariana.\n\n### Code included below in case of file changes\n\nApplying ML model using smaller, specific gene sets (e.g. genes significantly correlated with a phys metric, genes with a specific known function). Also adding in pOverA filtering\n\nInputs:\n\n-   RNA counts matrix (raw): `../output/02.20-D-Apul-RNAseq-alignment-HiSat2/apul-gene_count_matrix.csv`\n\n-   Gene sets of interest: `../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/`\n\n-   sRNA/miRNA counts matrix (raw): `../output/03.10-D-Apul-sRNAseq-expression-DESeq2/Apul_miRNA_ShortStack_counts_formatted.txt`\n\n-   sample metadata: `../../M-multi-species/data/rna_metadata.csv`\n\n# 1 Load libraries\n\n``` r\nlibrary(tidyverse)\n```\n\n```         \n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n``` r\nlibrary(ggplot2)\nlibrary(DESeq2)\n```\n\n```         \n## Loading required package: S4Vectors\n## Loading required package: stats4\n## Loading required package: BiocGenerics\n## \n## Attaching package: 'BiocGenerics'\n## \n## The following objects are masked from 'package:lubridate':\n## \n##     intersect, setdiff, union\n## \n## The following objects are masked from 'package:dplyr':\n## \n##     combine, intersect, setdiff, union\n## \n## The following objects are masked from 'package:stats':\n## \n##     IQR, mad, sd, var, xtabs\n## \n## The following objects are masked from 'package:base':\n## \n##     anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n##     table, tapply, union, unique, unsplit, which.max, which.min\n## \n## \n## Attaching package: 'S4Vectors'\n## \n## The following objects are masked from 'package:lubridate':\n## \n##     second, second<-\n## \n## The following objects are masked from 'package:dplyr':\n## \n##     first, rename\n## \n## The following object is masked from 'package:tidyr':\n## \n##     expand\n## \n## The following objects are masked from 'package:base':\n## \n##     expand.grid, I, unname\n## \n## Loading required package: IRanges\n## \n## Attaching package: 'IRanges'\n## \n## The following object is masked from 'package:lubridate':\n## \n##     %within%\n## \n## The following objects are masked from 'package:dplyr':\n## \n##     collapse, desc, slice\n## \n## The following object is masked from 'package:purrr':\n## \n##     reduce\n## \n## Loading required package: GenomicRanges\n## Loading required package: GenomeInfoDb\n## Loading required package: SummarizedExperiment\n## Loading required package: MatrixGenerics\n## Loading required package: matrixStats\n## \n## Attaching package: 'matrixStats'\n## \n## The following object is masked from 'package:dplyr':\n## \n##     count\n## \n## \n## Attaching package: 'MatrixGenerics'\n## \n## The following objects are masked from 'package:matrixStats':\n## \n##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n##     colWeightedMeans, colWeightedMedians, colWeightedSds,\n##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n##     rowWeightedSds, rowWeightedVars\n## \n## Loading required package: Biobase\n## Welcome to Bioconductor\n## \n##     Vignettes contain introductory material; view with\n##     'browseVignettes()'. To cite Bioconductor, see\n##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n## \n## \n## Attaching package: 'Biobase'\n## \n## The following object is masked from 'package:MatrixGenerics':\n## \n##     rowMedians\n## \n## The following objects are masked from 'package:matrixStats':\n## \n##     anyMissing, rowMedians\n```\n\n``` r\nlibrary(igraph)\n```\n\n```         \n## \n## Attaching package: 'igraph'\n## \n## The following object is masked from 'package:GenomicRanges':\n## \n##     union\n## \n## The following object is masked from 'package:IRanges':\n## \n##     union\n## \n## The following object is masked from 'package:S4Vectors':\n## \n##     union\n## \n## The following objects are masked from 'package:BiocGenerics':\n## \n##     normalize, path, union\n## \n## The following objects are masked from 'package:lubridate':\n## \n##     %--%, union\n## \n## The following objects are masked from 'package:dplyr':\n## \n##     as_data_frame, groups, union\n## \n## The following objects are masked from 'package:purrr':\n## \n##     compose, simplify\n## \n## The following object is masked from 'package:tidyr':\n## \n##     crossing\n## \n## The following object is masked from 'package:tibble':\n## \n##     as_data_frame\n## \n## The following objects are masked from 'package:stats':\n## \n##     decompose, spectrum\n## \n## The following object is masked from 'package:base':\n## \n##     union\n```\n\n``` r\nlibrary(psych)\n```\n\n```         \n## \n## Attaching package: 'psych'\n## \n## The following object is masked from 'package:SummarizedExperiment':\n## \n##     distance\n## \n## The following object is masked from 'package:GenomicRanges':\n## \n##     distance\n## \n## The following objects are masked from 'package:IRanges':\n## \n##     distance, reflect\n## \n## The following objects are masked from 'package:ggplot2':\n## \n##     %+%, alpha\n```\n\n``` r\nlibrary(tidygraph)\n```\n\n```         \n## \n## Attaching package: 'tidygraph'\n## \n## The following object is masked from 'package:igraph':\n## \n##     groups\n## \n## The following objects are masked from 'package:IRanges':\n## \n##     active, slice\n## \n## The following objects are masked from 'package:S4Vectors':\n## \n##     active, rename\n## \n## The following object is masked from 'package:stats':\n## \n##     filter\n```\n\n``` r\nlibrary(ggraph)\nlibrary(WGCNA)\n```\n\n```         \n## Loading required package: dynamicTreeCut\n## Loading required package: fastcluster\n## \n## Attaching package: 'fastcluster'\n## \n## The following object is masked from 'package:stats':\n## \n##     hclust\n## \n## \n## \n## Attaching package: 'WGCNA'\n## \n## The following object is masked from 'package:IRanges':\n## \n##     cor\n## \n## The following object is masked from 'package:S4Vectors':\n## \n##     cor\n## \n## The following object is masked from 'package:stats':\n## \n##     cor\n```\n\n``` r\nlibrary(edgeR)\n```\n\n```         \n## Loading required package: limma\n## \n## Attaching package: 'limma'\n## \n## The following object is masked from 'package:DESeq2':\n## \n##     plotMA\n## \n## The following object is masked from 'package:BiocGenerics':\n## \n##     plotMA\n```\n\n``` r\nlibrary(reshape2)\n```\n\n```         \n## \n## Attaching package: 'reshape2'\n## \n## The following object is masked from 'package:tidyr':\n## \n##     smiths\n```\n\n``` r\nlibrary(ggcorrplot)\nlibrary(corrplot)\n```\n\n```         \n## corrplot 0.94 loaded\n```\n\n``` r\nlibrary(rvest)\n```\n\n```         \n## \n## Attaching package: 'rvest'\n## \n## The following object is masked from 'package:readr':\n## \n##     guess_encoding\n```\n\n``` r\nlibrary(purrr)\nlibrary(pheatmap)\nlibrary(glmnet)\n```\n\n```         \n## Loading required package: Matrix\n## \n## Attaching package: 'Matrix'\n## \n## The following object is masked from 'package:S4Vectors':\n## \n##     expand\n## \n## The following objects are masked from 'package:tidyr':\n## \n##     expand, pack, unpack\n## \n## Loaded glmnet 4.1-8\n```\n\n``` r\nlibrary(caret)\n```\n\n```         \n## Loading required package: lattice\n## \n## Attaching package: 'caret'\n## \n## The following object is masked from 'package:purrr':\n## \n##     lift\n```\n\n``` r\nlibrary(factoextra)\n```\n\n```         \n## Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n```\n\n``` r\nlibrary(vegan)\n```\n\n```         \n## Loading required package: permute\n## \n## Attaching package: 'permute'\n## \n## The following object is masked from 'package:igraph':\n## \n##     permute\n## \n## This is vegan 2.6-8\n## \n## Attaching package: 'vegan'\n## \n## The following object is masked from 'package:caret':\n## \n##     tolerance\n## \n## The following object is masked from 'package:psych':\n## \n##     pca\n## \n## The following object is masked from 'package:igraph':\n## \n##     diversity\n```\n\n``` r\nlibrary(ggfortify)\nlibrary(genefilter)\n```\n\n```         \n## \n## Attaching package: 'genefilter'\n## \n## The following object is masked from 'package:psych':\n## \n##     AUC\n## \n## The following objects are masked from 'package:MatrixGenerics':\n## \n##     rowSds, rowVars\n## \n## The following objects are masked from 'package:matrixStats':\n## \n##     rowSds, rowVars\n## \n## The following object is masked from 'package:readr':\n## \n##     spec\n```\n\n``` r\nlibrary(scales)\n```\n\n```         \n## \n## Attaching package: 'scales'\n## \n## The following objects are masked from 'package:psych':\n## \n##     alpha, rescale\n## \n## The following object is masked from 'package:purrr':\n## \n##     discard\n## \n## The following object is masked from 'package:readr':\n## \n##     col_factor\n```\n\n# 2 Load and prep data\n\nLoad in count matrices for RNAseq.\n\n``` r\n# raw gene counts data (will filter and variance stabilize)\nApul_genes <- read_csv(\"../output/02.20-D-Apul-RNAseq-alignment-HiSat2/apul-gene_count_matrix.csv\")\n```\n\n```         \n## Rows: 44371 Columns: 41\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (1): gene_id\n## dbl (40): 1A1, 1A10, 1A12, 1A2, 1A8, 1A9, 1B1, 1B10, 1B2, 1B5, 1B9, 1C10, 1C...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n``` r\nApul_genes <- as.data.frame(Apul_genes)\n\n# format gene IDs as rownames (instead of a column)\nrownames(Apul_genes) <- Apul_genes$gene_id\nApul_genes <- Apul_genes%>%select(!gene_id)\n\n\n# load and format metadata\nmetadata <- read_csv(\"../../M-multi-species/data/rna_metadata.csv\")%>%select(AzentaSampleName, ColonyID, Timepoint) %>%\n  filter(grepl(\"ACR\", ColonyID))\n```\n\n```         \n## New names:\n## Rows: 117 Columns: 19\n## ── Column specification\n## ──────────────────────────────────────────────────────── Delimiter: \",\" chr\n## (13): SampleName, WellNumber, AzentaSampleName, ColonyID, Timepoint, Sam... dbl\n## (5): SampleNumber, Plate, TotalAmount-ng, Volume-uL, Conc-ng.uL lgl (1):\n## MethodUsedForSpectrophotometry\n## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ\n## Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## • `` -> `...19`\n```\n\n``` r\nmetadata$Sample <- paste(metadata$AzentaSampleName, metadata$ColonyID, metadata$Timepoint, sep = \"_\")\n\ncolonies <- unique(metadata$ColonyID)\n\n# Rename gene column names to include full sample info (as in miRNA table)\ncolnames(Apul_genes) <- metadata$Sample[match(colnames(Apul_genes), metadata$AzentaSampleName)]\n\n# raw miRNA counts (will filter and variance stabilize)\nApul_miRNA <- read.table(file = \"../output/03.10-D-Apul-sRNAseq-expression-DESeq2/Apul_miRNA_ShortStack_counts_formatted.txt\", header = TRUE, sep = \"\\t\", check.names = FALSE)\n```\n\n## 2.1 Counts filtering\n\nNote: I'm filtering (removing unrepresented and lowly-represented genes) and variance stabilizing *before* I isolate specific gene sets. Not sure if the preliminary vst is appropriate though?\n\nEnsure there are no genes or miRNAs with 0 counts across all samples.\n\n``` r\nnrow(Apul_genes)\n```\n\n```         \n## [1] 44371\n```\n\n``` r\nApul_genes_red<-Apul_genes %>%\n     mutate(Total = rowSums(.[, 1:40]))%>%\n    filter(!Total==0)%>%\n    dplyr::select(!Total)\n\nnrow(Apul_genes_red)\n```\n\n```         \n## [1] 35869\n```\n\n``` r\n# miRNAs\nnrow(Apul_miRNA)\n```\n\n```         \n## [1] 51\n```\n\n``` r\nApul_miRNA_red<-Apul_miRNA %>%\n     mutate(Total = rowSums(.[, 1:40]))%>%\n    filter(!Total==0)%>%\n    dplyr::select(!Total)\n\nnrow(Apul_miRNA_red)\n```\n\n```         \n## [1] 51\n```\n\nRemoving genes with only 0 counts reduced number from 44371 to 35869. Retained all 51 miRNAs.\n\n*pOverA*: Specifying the minimum count for a proportion of samples for each gene. Setting 3/38 = 0.08. This would retain genes that are only expressed in a single season in a couple of the colonies. Additionally, setting the minimum count so that the minimum number of samples must have a gene count above a certain threshold.\n\ngenes:\n\n``` r\nfilt <- filterfun(pOverA(0.08, 5))\n\n#create filter for the counts data\ngfilt <- genefilter(Apul_genes_red, filt)\n\n#identify genes to keep by count filter\ngkeep <- Apul_genes_red[gfilt,]\n\n#identify gene lists\ngn.keep <- rownames(gkeep)\n\n#gene count data filtered in PoverA, P percent of the samples have counts over A\nApul_genes_filt <- as.data.frame(Apul_genes_red[which(rownames(Apul_genes_red) %in% gn.keep),])\n\n#How many rows do we have before and after filtering?\nnrow(Apul_genes_red) #Before\n```\n\n```         \n## [1] 35869\n```\n\n``` r\nnrow(Apul_genes_filt) #After\n```\n\n```         \n## [1] 25730\n```\n\nWe had 35869 genes before, and 25730 genes after filtering.\n\nmiRNA:\n\n``` r\nmifilt <- filterfun(pOverA(0.08, 5))\n\n#create filter for the counts data\nmifilt <- genefilter(Apul_miRNA_red, mifilt)\n\n#identify genes to keep by count filter\nmikeep <- Apul_miRNA_red[mifilt,]\n\n#identify genes to keep by count filter\nmikeep <- Apul_miRNA_red[mifilt,]\n\n#identify gene lists\nmi.keep <- rownames(mikeep)\n\n#gene count data filtered in PoverA, P percent of the samples have counts over A\nApul_miRNA_filt <- as.data.frame(Apul_miRNA_red[which(rownames(Apul_miRNA_red) %in% mi.keep),])\n\n#How many rows do we have before and after filtering?\nnrow(Apul_miRNA_red) #Before\n```\n\n```         \n## [1] 51\n```\n\n``` r\nnrow(Apul_miRNA_filt) #After\n```\n\n```         \n## [1] 47\n```\n\nOf the 51 miRNA, 47 were retained. Which were removed?\n\n``` r\nsetdiff(rownames(Apul_miRNA_red), rownames(Apul_miRNA_filt))\n```\n\n```         \n## [1] \"Cluster_5685\"  \"Cluster_11565\" \"Cluster_13647\" \"Cluster_14633\"\n```\n\n## 2.2 Assign metadata and arrange order of columns\n\nOrder metadata the same as the column order in the gene matrix.\n\n``` r\nlist<-colnames(Apul_genes_filt)\nlist<-as.factor(list)\n\nmetadata$Sample<-as.factor(metadata$Sample)\n\n# Re-order the levels\nmetadata$Sample <- factor(as.character(metadata$Sample), levels=list)\n# Re-order the data.frame\nmetadata_ordered <- metadata[order(metadata$Sample),]\nmetadata_ordered$Sample\n```\n\n```         \n##  [1] 1A1_ACR-173_TP1  1A10_ACR-145_TP4 1A12_ACR-237_TP3 1A2_ACR-244_TP4 \n##  [5] 1A8_ACR-186_TP2  1A9_ACR-244_TP2  1B1_ACR-225_TP3  1B10_ACR-150_TP4\n##  [9] 1B2_ACR-173_TP3  1B5_ACR-229_TP1  1B9_ACR-265_TP4  1C10_ACR-173_TP4\n## [13] 1C4_ACR-139_TP4  1D10_ACR-265_TP2 1D3_ACR-225_TP4  1D4_ACR-237_TP4 \n## [17] 1D6_ACR-229_TP2  1D8_ACR-237_TP2  1D9_ACR-229_TP4  1E1_ACR-265_TP3 \n## [21] 1E3_ACR-150_TP2  1E5_ACR-139_TP3  1E9_ACR-237_TP1  1F11_ACR-173_TP2\n## [25] 1F4_ACR-150_TP3  1F8_ACR-145_TP3  1G5_ACR-244_TP3  1H11_ACR-225_TP1\n## [29] 1H12_ACR-186_TP3 1H6_ACR-225_TP2  1H7_ACR-229_TP3  1H8_ACR-186_TP4 \n## [33] 2B2_ACR-145_TP1  2B3_ACR-139_TP2  2C1_ACR-244_TP1  2C2_ACR-139_TP1 \n## [37] 2D2_ACR-150_TP1  2E2_ACR-186_TP1  2F1_ACR-265_TP1  2G1_ACR-145_TP2 \n## 40 Levels: 1A1_ACR-173_TP1 1A10_ACR-145_TP4 ... 2G1_ACR-145_TP2\n```\n\n``` r\n# Make sure the miRNA colnames are also in the same order as the gene colnames\nApul_miRNA_filt <- Apul_miRNA_filt[, colnames(Apul_genes_filt)]\n```\n\nMetadata and gene count matrix are now ordered the same.\n\n## 2.3 Conduct variance stabilized transformation\n\nVST should be performed on our two input datasets (gene counts and miRNA counts) separately\n\nGenes:\n\n``` r\n#Set DESeq2 design\ndds_genes <- DESeqDataSetFromMatrix(countData = Apul_genes_filt,\n                              colData = metadata_ordered,\n                              design = ~Timepoint+ColonyID)\n```\n\n```         \n## converting counts to integer mode\n\n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\nCheck size factors.\n\n``` r\nSF.dds_genes <- estimateSizeFactors(dds_genes) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than 4 for us to use vst\n```\n\n```         \n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\nprint(sizeFactors(SF.dds_genes)) #View size factors\n```\n\n```         \n##  1A1_ACR-173_TP1 1A10_ACR-145_TP4 1A12_ACR-237_TP3  1A2_ACR-244_TP4 \n##        0.7568558        0.7687730        1.4234818        0.6420081 \n##  1A8_ACR-186_TP2  1A9_ACR-244_TP2  1B1_ACR-225_TP3 1B10_ACR-150_TP4 \n##        1.1213916        1.2061267        1.4198168        1.4021990 \n##  1B2_ACR-173_TP3  1B5_ACR-229_TP1  1B9_ACR-265_TP4 1C10_ACR-173_TP4 \n##        1.0388656        1.6077879        0.9862597        0.7148431 \n##  1C4_ACR-139_TP4 1D10_ACR-265_TP2  1D3_ACR-225_TP4  1D4_ACR-237_TP4 \n##        1.1895625        1.1390590        0.6730531        1.0550212 \n##  1D6_ACR-229_TP2  1D8_ACR-237_TP2  1D9_ACR-229_TP4  1E1_ACR-265_TP3 \n##        1.0931378        0.8705408        0.6710741        1.0715773 \n##  1E3_ACR-150_TP2  1E5_ACR-139_TP3  1E9_ACR-237_TP1 1F11_ACR-173_TP2 \n##        1.1807769        1.2228114        1.0417935        1.0435593 \n##  1F4_ACR-150_TP3  1F8_ACR-145_TP3  1G5_ACR-244_TP3 1H11_ACR-225_TP1 \n##        1.3998258        0.7956019        1.6096974        1.4234818 \n## 1H12_ACR-186_TP3  1H6_ACR-225_TP2  1H7_ACR-229_TP3  1H8_ACR-186_TP4 \n##        0.6119729        0.7956019        1.3289120        1.2201768 \n##  2B2_ACR-145_TP1  2B3_ACR-139_TP2  2C1_ACR-244_TP1  2C2_ACR-139_TP1 \n##        1.1042385        1.4406114        0.6651642        1.1926753 \n##  2D2_ACR-150_TP1  2E2_ACR-186_TP1  2F1_ACR-265_TP1  2G1_ACR-145_TP2 \n##        0.7835924        0.6245044        0.9581634        0.8213095\n```\n\n``` r\nall(sizeFactors(SF.dds_genes)) < 4\n```\n\n```         \n## Warning in all(sizeFactors(SF.dds_genes)): coercing argument of type 'double'\n## to logical\n\n## [1] TRUE\n```\n\nAll size factors are less than 4, so we can use VST transformation.\n\n``` r\nvsd_genes <- vst(dds_genes, blind=TRUE) #apply a variance stabilizing transformation to minimize effects of small counts and normalize with respect to library size\nvsd_genes <- assay(vsd_genes)\nhead(vsd_genes, 3) #view transformed gene count data for the first three genes in the dataset.  \n```\n\n```         \n##            1A1_ACR-173_TP1 1A10_ACR-145_TP4 1A12_ACR-237_TP3 1A2_ACR-244_TP4\n## FUN_002326        6.381927         6.314605         5.963893        5.647868\n## FUN_002303        7.272815         6.789218         6.385965        5.817225\n## FUN_002304        6.611599         5.502055         5.752904        5.527221\n##            1A8_ACR-186_TP2 1A9_ACR-244_TP2 1B1_ACR-225_TP3 1B10_ACR-150_TP4\n## FUN_002326        5.547668        5.536500        5.989895         5.915797\n## FUN_002303        5.617732        5.660921        6.387376         6.245288\n## FUN_002304        5.456087        5.448168        5.575266         5.514644\n##            1B2_ACR-173_TP3 1B5_ACR-229_TP1 1B9_ACR-265_TP4 1C10_ACR-173_TP4\n## FUN_002326        6.380263        5.419572        5.937605         6.320872\n## FUN_002303        6.996842        5.554799        6.270729         6.801444\n## FUN_002304        5.693721        5.234250        5.470765         5.909332\n##            1C4_ACR-139_TP4 1D10_ACR-265_TP2 1D3_ACR-225_TP4 1D4_ACR-237_TP4\n## FUN_002326        5.538589         5.889583        6.168475        6.284689\n## FUN_002303        5.942188         6.331095        6.447554        6.705413\n## FUN_002304        5.606644         5.545237        5.520407        5.557336\n##            1D6_ACR-229_TP2 1D8_ACR-237_TP2 1D9_ACR-229_TP4 1E1_ACR-265_TP3\n## FUN_002326        5.458930        6.128558        5.520828        5.787281\n## FUN_002303        5.551676        6.587336        5.234250        6.230238\n## FUN_002304        5.458930        5.735774        5.234250        5.626491\n##            1E3_ACR-150_TP2 1E5_ACR-139_TP3 1E9_ACR-237_TP1 1F11_ACR-173_TP2\n## FUN_002326        5.539715        5.601574        6.167772         5.838837\n## FUN_002303        5.761383        5.867108        6.602561         6.243007\n## FUN_002304        5.450448        5.446706        5.559372         5.794565\n##            1F4_ACR-150_TP3 1F8_ACR-145_TP3 1G5_ACR-244_TP3 1H11_ACR-225_TP1\n## FUN_002326        5.916364        6.015555        5.496001         5.963893\n## FUN_002303        6.510569        6.409577        5.816389         6.385965\n## FUN_002304        5.916364        5.497514        5.496001         5.752904\n##            1H12_ACR-186_TP3 1H6_ACR-225_TP2 1H7_ACR-229_TP3 1H8_ACR-186_TP4\n## FUN_002326         5.657826        6.015555        5.438063        5.534761\n## FUN_002303         5.752103        6.409577        5.438063        5.793954\n## FUN_002304         5.234250        5.497514        5.438063        5.446935\n##            2B2_ACR-145_TP1 2B3_ACR-139_TP2 2C1_ACR-244_TP1 2C2_ACR-139_TP1\n## FUN_002326        5.968475        5.572807        5.640653        5.606161\n## FUN_002303        6.367643        5.711957        5.731177        5.908979\n## FUN_002304        5.550083        5.430015        5.522094        5.538193\n##            2D2_ACR-150_TP1 2E2_ACR-186_TP1 2F1_ACR-265_TP1 2G1_ACR-145_TP2\n## FUN_002326        6.519530        5.653585        6.259654        5.810603\n## FUN_002303        6.813192        5.653585        6.639302        6.391978\n## FUN_002304        6.021376        5.531284        5.474200        5.681868\n```\n\nmiRNA:\n\n``` r\n#Set DESeq2 design\ndds_miRNA <- DESeqDataSetFromMatrix(countData = Apul_miRNA_filt,\n                              colData = metadata_ordered,\n                              design = ~Timepoint+ColonyID)\n```\n\n```         \n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\nCheck size factors.\n\n``` r\nSF.dds_miRNA <- estimateSizeFactors(dds_miRNA) #estimate size factors to determine if we can use vst  to transform our data. Size factors should be less than 4 for us to use vst\n```\n\n```         \n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\nprint(sizeFactors(SF.dds_miRNA)) #View size factors\n```\n\n```         \n##  1A1_ACR-173_TP1 1A10_ACR-145_TP4 1A12_ACR-237_TP3  1A2_ACR-244_TP4 \n##        1.4663620        0.5013837        1.1375801        1.4285229 \n##  1A8_ACR-186_TP2  1A9_ACR-244_TP2  1B1_ACR-225_TP3 1B10_ACR-150_TP4 \n##        1.4848190        3.6543406        0.6428434        0.6090123 \n##  1B2_ACR-173_TP3  1B5_ACR-229_TP1  1B9_ACR-265_TP4 1C10_ACR-173_TP4 \n##        0.8904346        3.5848052        0.5041214        0.3523615 \n##  1C4_ACR-139_TP4 1D10_ACR-265_TP2  1D3_ACR-225_TP4  1D4_ACR-237_TP4 \n##        0.2687172        1.7352574        3.3952218        1.7342028 \n##  1D6_ACR-229_TP2  1D8_ACR-237_TP2  1D9_ACR-229_TP4  1E1_ACR-265_TP3 \n##        3.1325088        1.6420440        1.6784438        0.4768304 \n##  1E3_ACR-150_TP2  1E5_ACR-139_TP3  1E9_ACR-237_TP1 1F11_ACR-173_TP2 \n##        2.5657486        0.1036718        0.8991829        1.4685414 \n##  1F4_ACR-150_TP3  1F8_ACR-145_TP3  1G5_ACR-244_TP3 1H11_ACR-225_TP1 \n##        1.9455453        0.4071314        2.2838388        0.8196170 \n## 1H12_ACR-186_TP3  1H6_ACR-225_TP2  1H7_ACR-229_TP3  1H8_ACR-186_TP4 \n##        0.4730390        1.9006672        1.1185865        0.8466327 \n##  2B2_ACR-145_TP1  2B3_ACR-139_TP2  2C1_ACR-244_TP1  2C2_ACR-139_TP1 \n##        0.9294126        1.8998015        1.2208764        1.4280205 \n##  2D2_ACR-150_TP1  2E2_ACR-186_TP1  2F1_ACR-265_TP1  2G1_ACR-145_TP2 \n##        0.5326906        0.3152060        0.3054304        1.9176071\n```\n\n``` r\nall(sizeFactors(SF.dds_miRNA)) < 4\n```\n\n```         \n## Warning in all(sizeFactors(SF.dds_miRNA)): coercing argument of type 'double'\n## to logical\n\n## [1] TRUE\n```\n\nAll size factors are less than 4, so we can use VST transformation.\n\n``` r\nvsd_miRNA <- varianceStabilizingTransformation(dds_miRNA, blind=TRUE) #apply a variance stabilizing transformation to minimize effects of small counts and normalize with respect to library size. Using varianceStabilizingTransformation() instead of vst() because few input genes\n```\n\n```         \n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\nvsd_miRNA <- assay(vsd_miRNA)\nhead(vsd_miRNA, 3) #view transformed gene count data for the first three genes in the dataset.\n```\n\n```         \n##              1A1_ACR-173_TP1 1A10_ACR-145_TP4 1A12_ACR-237_TP3 1A2_ACR-244_TP4\n## Cluster_1819        6.238826         6.317673         5.193726        5.902841\n## Cluster_1832       10.289253         9.353757         8.601591        9.385848\n## Cluster_1833        5.048031         5.238450         5.689758        4.740887\n##              1A8_ACR-186_TP2 1A9_ACR-244_TP2 1B1_ACR-225_TP3 1B10_ACR-150_TP4\n## Cluster_1819        5.965996        6.629812        5.144832         4.845529\n## Cluster_1832        9.713980        9.231169        9.827051         8.514351\n## Cluster_1833        3.187374        1.605181        5.581722         3.938572\n##              1B2_ACR-173_TP3 1B5_ACR-229_TP1 1B9_ACR-265_TP4 1C10_ACR-173_TP4\n## Cluster_1819        5.533393        5.973709        5.794654         5.833047\n## Cluster_1832        9.277000        9.958107        8.808700         9.394462\n## Cluster_1833        5.305314        5.533981        4.125680         3.800581\n##              1C4_ACR-139_TP4 1D10_ACR-265_TP2 1D3_ACR-225_TP4 1D4_ACR-237_TP4\n## Cluster_1819        5.429070         5.936798        4.652820        4.878331\n## Cluster_1832        9.628054         8.500652        9.747072        9.154859\n## Cluster_1833        5.762673         1.605181        4.903375        5.910117\n##              1D6_ACR-229_TP2 1D8_ACR-237_TP2 1D9_ACR-229_TP4 1E1_ACR-265_TP3\n## Cluster_1819        6.091687        5.787796        5.498316        5.515029\n## Cluster_1832        9.831971        8.639755        9.366864        9.133968\n## Cluster_1833        3.911358        5.342319        3.643082        5.642128\n##              1E3_ACR-150_TP2 1E5_ACR-139_TP3 1E9_ACR-237_TP1 1F11_ACR-173_TP2\n## Cluster_1819        6.227797        4.644213        4.747952         6.041496\n## Cluster_1832        9.030323        8.781771        8.350263        10.030506\n## Cluster_1833        1.605181        1.605181        4.747952         4.459880\n##              1F4_ACR-150_TP3 1F8_ACR-145_TP3 1G5_ACR-244_TP3 1H11_ACR-225_TP1\n## Cluster_1819        5.112737        5.964150        5.569442         4.792447\n## Cluster_1832        8.626276        9.054458       10.240496         9.551367\n## Cluster_1833        3.516495        4.515605        1.605181         4.915503\n##              1H12_ACR-186_TP3 1H6_ACR-225_TP2 1H7_ACR-229_TP3 1H8_ACR-186_TP4\n## Cluster_1819         6.242681        4.931185        5.661095        5.282405\n## Cluster_1832         9.867459        9.826331        9.503289       10.018506\n## Cluster_1833         4.858957        4.684693        3.936790        5.795099\n##              2B2_ACR-145_TP1 2B3_ACR-139_TP2 2C1_ACR-244_TP1 2C2_ACR-139_TP1\n## Cluster_1819        5.734780        5.380442        5.716894        5.353031\n## Cluster_1832        7.998131        9.872251        9.347640        9.619989\n## Cluster_1833        1.605181        3.901090        5.623762        4.490532\n##              2D2_ACR-150_TP1 2E2_ACR-186_TP1 2F1_ACR-265_TP1 2G1_ACR-145_TP2\n## Cluster_1819        5.560357        6.359532        5.865697        5.254525\n## Cluster_1832        8.110494        9.399757        9.144490        9.088095\n## Cluster_1833        3.686480        1.605181        1.605181        4.299740\n```\n\n``` r\nvsd_genes <- as.data.frame(t(vsd_genes))\nvsd_miRNA <- as.data.frame(t(vsd_miRNA))\n```\n\n## 2.4 Islolate gene sets\n\nRead in gene set tables\n\n``` r\n# genes from WGCNA modules significantly correlated with host biomass\nHost_AFDW <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/Host_AFDW.mg.cm2_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n# genes from WGCNA modules significantly correlated with symbiont photosynthesis\nAm <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/Am_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n# GO temrs related to energy production\nATP_production_GO <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/ATP_production_GO_terms_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n```\n\nIsolate filtered counts by gene set\n\n``` r\nvsd_Host_AFDW <- vsd_genes[, colnames(vsd_genes) %in% Host_AFDW$gene_id]\nvsd_Am <- vsd_genes[, colnames(vsd_genes) %in% Am$gene_id]\nvsd_ATP_production_GO <- vsd_genes[, colnames(vsd_genes) %in% ATP_production_GO$gene_id]\n```\n\n# 3 Feature selection\n\nFor gene sets that are large we'll need to reduce dimensionality using PCA. Note that the \\# of miRNA (47 after filtering) is low enough that reduction isn't necessary.\n\n## 3.1 Host_AFDW\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene+miRNA expression matrix\npca_Host_AFDW <- prcomp(vsd_Host_AFDW, scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_Host_AFDW <- summary(pca_Host_AFDW)$importance[2, ]  # Cumulative variance explained\nnum_pcs_Host_AFDW <- min(which(cumsum(explained_var_Host_AFDW) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nHost_AFDW_pcs <- as.data.frame(pca_Host_AFDW$x[, 1:num_pcs_Host_AFDW])  # Extract selected PCs\n\ndim(Host_AFDW_pcs)\n```\n\n```         \n## [1] 40 29\n```\n\n29 PCs summarize 95% of the explained variance in genes associated with host biomass (Host AFDW)\n\n## 3.2 Am\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene+miRNA expression matrix\npca_Am <- prcomp(vsd_Am, scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_Am <- summary(pca_Am)$importance[2, ]  # Cumulative variance explained\nnum_pcs_Am <- min(which(cumsum(explained_var_Am) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nAm_pcs <- as.data.frame(pca_Am$x[, 1:num_pcs_Am])  # Extract selected PCs\n\ndim(Am_pcs)\n```\n\n```         \n## [1] 40 30\n```\n\n30 PCs summarize 95% of the explained variance in genes associated with symbiont photosynthesis (Am)\n\n## 3.3 Am\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene+miRNA expression matrix\npca_ATP_prod_GO <- prcomp(vsd_ATP_production_GO, scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_ATP_prod_GO <- summary(pca_ATP_prod_GO)$importance[2, ]  # Cumulative variance explained\nnum_pcs_ATP_prod_GO <- min(which(cumsum(explained_var_ATP_prod_GO) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nATP_prod_GO_pcs <- as.data.frame(pca_ATP_prod_GO$x[, 1:num_pcs_ATP_prod_GO])  # Extract selected PCs\n\ndim(ATP_prod_GO_pcs)\n```\n\n```         \n## [1] 40 11\n```\n\n11 PCs summarize 95% of the explained variance in genes associated with symbiont photosynthesis (Am)\n\n# 4 Host biomass (Host_AFDW)\n\n## 4.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression.\n\n``` r\ntrain_models <- function(response_pcs, predictor_pcs) {\n  models <- list()\n  \n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]  # Gene expression PC\n    X <- as.matrix(predictor_pcs)  # miRNA expression as predictors\n    \n    # Train elastic net model (alpha = 0.5 for mix of LASSO & Ridge)\n    model <- cv.glmnet(X, y, alpha = 0.5)\n    \n    models[[pc]] <- model\n  }\n  \n  return(models)\n}\n\n# Train models predicting gene expression PCs from miRNA expression\nmodels_Host_AFDW <- train_models(Host_AFDW_pcs, vsd_miRNA)\n```\n\nExtract feature importance.\n\n``` r\nget_feature_importance <- function(models) {\n  importance_list <- lapply(models, function(model) {\n    coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Convert to regular matrix & remove intercept\n    \n    # Convert to data frame\n    coefs_df <- data.frame(Feature = rownames(coefs), Importance = as.numeric(coefs))\n    \n    return(coefs_df)\n  })\n  \n  # Combine feature importance across all predicted gene PCs\n  importance_df <- bind_rows(importance_list) %>%\n    group_by(Feature) %>%\n    summarize(MeanImportance = mean(abs(Importance)), .groups = \"drop\") %>%\n    arrange(desc(MeanImportance))\n  \n  return(importance_df)\n}\n\nfeature_importance_Host_AFDW <- get_feature_importance(models_Host_AFDW)\nhead(feature_importance_Host_AFDW, 20)  # Top predictive miRNA\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature       MeanImportance\n##    <chr>                  <dbl>\n##  1 Cluster_5517           0.362\n##  2 Cluster_17623          0.352\n##  3 Cluster_9706           0.325\n##  4 Cluster_17173          0.324\n##  5 Cluster_9420           0.318\n##  6 Cluster_3109           0.317\n##  7 Cluster_14605          0.312\n##  8 Cluster_2746           0.309\n##  9 Cluster_5516           0.284\n## 10 Cluster_1819           0.284\n## 11 Cluster_17186          0.279\n## 12 Cluster_14146          0.237\n## 13 Cluster_1950           0.230\n## 14 Cluster_3226           0.208\n## 15 Cluster_3301           0.207\n## 16 Cluster_1865           0.204\n## 17 Cluster_17245          0.199\n## 18 Cluster_9512           0.190\n## 19 Cluster_14692          0.185\n## 20 Cluster_17192          0.184\n```\n\nEvaluate performance.\n\n``` r\nevaluate_model_performance <- function(models, response_pcs, predictor_pcs) {\n  results <- data.frame(PC = colnames(response_pcs), R2 = NA)\n\n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]\n    X <- as.matrix(predictor_pcs)\n\n    model <- models[[pc]]\n    preds <- predict(model, X, s = \"lambda.min\")\n\n    R2 <- cor(y, preds)^2  # R-squared metric\n    results[results$PC == pc, \"R2\"] <- R2\n  }\n\n  return(results)\n}\n\n# Function with error warnings:\n# evaluate_model_performance <- function(models, response_pcs, predictor_pcs) {\n#   results <- data.frame(PC = colnames(response_pcs), R2 = NA)\n#   \n#   for (pc in colnames(response_pcs)) {\n#     cat(\"Processing:\", pc, \"\\n\")\n#     \n#     y <- response_pcs[[pc]]\n#     X <- as.matrix(predictor_pcs)\n#     \n#     if (!(pc %in% names(models))) {\n#       cat(\"Model missing for PC:\", pc, \"\\n\")\n#       next\n#     }\n#   \n#     model <- models[[pc]]\n#     preds <- predict(model, X, s = \"lambda.min\")\n#     \n#     if (any(is.na(preds))) {\n#       cat(\"NA in predictions for PC:\", pc, \"\\n\")\n#     }\n#     \n#     if (var(y) == 0) {\n#       cat(\"Zero variance in y for PC:\", pc, \"\\n\")\n#       next\n#     }\n#   \n#     R2 <- cor(y, preds)^2\n#     results[results$PC == pc, \"R2\"] <- R2\n#   }\n#   \n#   return(results)\n# }\n\nperformance_results_Host_AFDW <- evaluate_model_performance(models_Host_AFDW, Host_AFDW_pcs, vsd_miRNA)\nsummary(performance_results_Host_AFDW$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.1751  0.4099  0.7795  0.6614  0.8911  0.9503      15\n```\n\n## 4.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_Host_AFDW <- feature_importance_Host_AFDW %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_Host_AFDW, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA as Predictive Features\",\n       x = \"miRNA\",\n       y = \"Mean Importance\")\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-22-1.png)<!-- -->\n\n``` r\nggplot(performance_results_Host_AFDW, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_Host_AFDW$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 15 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-23-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_Host_AFDW <- pca_Host_AFDW$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_Host_AFDW_df <- as.data.frame(loadings_Host_AFDW) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"Host_AFDW_PC\", values_to = \"Loading\")\n\n# View top CpGs contributing most to each PC\ntop_genes_Host_AFDW <- loadings_Host_AFDW_df %>%\n  group_by(Host_AFDW_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 10 CpGs per PC\n\nprint(top_genes_Host_AFDW)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   Host_AFDW_PC [40]\n##    gene       Host_AFDW_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_010504 PC1          -0.0593\n##  2 FUN_033160 PC1          -0.0587\n##  3 FUN_042402 PC1          -0.0580\n##  4 FUN_026248 PC1          -0.0579\n##  5 FUN_010505 PC1          -0.0578\n##  6 FUN_030089 PC1          -0.0576\n##  7 FUN_027385 PC1          -0.0575\n##  8 FUN_013949 PC1          -0.0573\n##  9 FUN_008069 PC1          -0.0572\n## 10 FUN_036450 PC1          -0.0570\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_Host_AFDW <- performance_results_Host_AFDW$PC[which.max(performance_results_Host_AFDW$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_Host_AFDW <- Host_AFDW_pcs[[best_pc_Host_AFDW]]\npredicted_values_Host_AFDW <- predict(models_Host_AFDW[[best_pc_Host_AFDW]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_Host_AFDW <- data.frame(\n  Actual = actual_values_Host_AFDW,\n  Predicted = predicted_values_Host_AFDW\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_Host_AFDW, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_Host_AFDW),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_Host_AFDW), y = max(predicted_values_Host_AFDW), \n           label = paste(\"R² =\", round(max(performance_results_Host_AFDW$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-25-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_Host_AFDW%>%filter(Host_AFDW_PC==best_pc_Host_AFDW))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   Host_AFDW_PC [1]\n##    gene       Host_AFDW_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_010504 PC1          -0.0593\n##  2 FUN_033160 PC1          -0.0587\n##  3 FUN_042402 PC1          -0.0580\n##  4 FUN_026248 PC1          -0.0579\n##  5 FUN_010505 PC1          -0.0578\n##  6 FUN_030089 PC1          -0.0576\n##  7 FUN_027385 PC1          -0.0575\n##  8 FUN_013949 PC1          -0.0573\n##  9 FUN_008069 PC1          -0.0572\n## 10 FUN_036450 PC1          -0.0570\n## 11 FUN_025551 PC1          -0.0569\n## 12 FUN_027383 PC1          -0.0567\n## 13 FUN_035483 PC1          -0.0566\n## 14 FUN_040002 PC1          -0.0563\n## 15 FUN_031375 PC1          -0.0558\n## 16 FUN_040401 PC1          -0.0558\n## 17 FUN_032914 PC1          -0.0557\n## 18 FUN_032541 PC1          -0.0555\n## 19 FUN_027486 PC1          -0.0555\n## 20 FUN_033529 PC1          -0.0552\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above 0.75\nall_pcs_Host_AFDW <- performance_results_Host_AFDW %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_Host_AFDW) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- Host_AFDW_pcs[[pc]]\n  predicted_values <- predict(models_Host_AFDW[[pc]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_Host_AFDW[performance_results_Host_AFDW$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-6.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-7.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-27-8.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_Host_AFDW) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_Host_AFDW[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA Predictors for\", pc),\n         x = \"miRNA\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-1.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-2.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-3.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-4.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-5.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-6.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-7.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-28-8.png)<!-- -->\n\n# 5 Symbiont photsynthesis (Am)\n\n## 5.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA expression\nmodels_Am <- train_models(Am_pcs, vsd_miRNA)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_Am <- get_feature_importance(models_Am)\nhead(feature_importance_Am, 20)  # Top predictive miRNA\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature       MeanImportance\n##    <chr>                  <dbl>\n##  1 Cluster_17173          1.20 \n##  2 Cluster_5516           0.969\n##  3 Cluster_9706           0.848\n##  4 Cluster_9420           0.785\n##  5 Cluster_4752           0.688\n##  6 Cluster_14146          0.570\n##  7 Cluster_4036           0.555\n##  8 Cluster_5517           0.534\n##  9 Cluster_1865           0.523\n## 10 Cluster_9786           0.522\n## 11 Cluster_2372           0.515\n## 12 Cluster_17245          0.505\n## 13 Cluster_1836           0.484\n## 14 Cluster_17623          0.480\n## 15 Cluster_17186          0.462\n## 16 Cluster_1819           0.430\n## 17 Cluster_4026           0.410\n## 18 Cluster_16354          0.403\n## 19 Cluster_10452          0.403\n## 20 Cluster_5603           0.385\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_Am <- evaluate_model_performance(models_Am, Am_pcs, vsd_miRNA)\nsummary(performance_results_Am$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.2014  0.5638  0.6729  0.6452  0.8223  0.9250      16\n```\n\n## 5.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_Am <- feature_importance_Am %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_Am, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA as Predictive Features\",\n       x = \"miRNA\",\n       y = \"Mean Importance\")\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-32-1.png)<!-- -->\n\n``` r\nggplot(performance_results_Am, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_Am$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 16 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-33-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_Am <- pca_Am$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_Am_df <- as.data.frame(loadings_Am) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"Am_PC\", values_to = \"Loading\")\n\n# View top CpGs contributing most to each PC\ntop_genes_Am <- loadings_Am_df %>%\n  group_by(Am_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 10 CpGs per PC\n\nprint(top_genes_Am)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   Am_PC [40]\n##    gene       Am_PC Loading\n##    <chr>      <chr>   <dbl>\n##  1 FUN_011681 PC1   -0.0250\n##  2 FUN_040949 PC1    0.0244\n##  3 FUN_027962 PC1    0.0244\n##  4 FUN_023373 PC1    0.0244\n##  5 FUN_000239 PC1    0.0244\n##  6 FUN_014926 PC1    0.0241\n##  7 FUN_001784 PC1   -0.0240\n##  8 FUN_016798 PC1   -0.0239\n##  9 FUN_023033 PC1   -0.0239\n## 10 FUN_016083 PC1   -0.0238\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_Am <- performance_results_Am$PC[which.max(performance_results_Am$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_Am <- Am_pcs[[best_pc_Am]]\npredicted_values_Am <- predict(models_Am[[best_pc_Am]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_Am <- data.frame(\n  Actual = actual_values_Am,\n  Predicted = predicted_values_Am\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_Am, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_Am),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_Am), y = max(predicted_values_Am), \n           label = paste(\"R² =\", round(max(performance_results_Am$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-35-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_Am%>%filter(Am_PC==best_pc_Am))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   Am_PC [1]\n##    gene       Am_PC Loading\n##    <chr>      <chr>   <dbl>\n##  1 FUN_000870 PC5   -0.0479\n##  2 FUN_031256 PC5   -0.0439\n##  3 FUN_006410 PC5    0.0420\n##  4 FUN_034999 PC5   -0.0416\n##  5 FUN_018197 PC5    0.0411\n##  6 FUN_036049 PC5   -0.0402\n##  7 FUN_043250 PC5   -0.0400\n##  8 FUN_011275 PC5   -0.0398\n##  9 FUN_015215 PC5    0.0397\n## 10 FUN_008217 PC5    0.0396\n## 11 FUN_001269 PC5    0.0389\n## 12 FUN_039800 PC5    0.0389\n## 13 FUN_018741 PC5   -0.0382\n## 14 FUN_003878 PC5   -0.0382\n## 15 FUN_030103 PC5    0.0381\n## 16 FUN_005241 PC5   -0.0378\n## 17 FUN_035648 PC5    0.0378\n## 18 FUN_033743 PC5    0.0377\n## 19 FUN_029320 PC5   -0.0376\n## 20 FUN_037177 PC5   -0.0375\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above 0.75\nall_pcs_Am <- performance_results_Am %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_Am) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- Am_pcs[[pc]]\n  predicted_values <- predict(models_Am[[pc]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_Am[performance_results_Am$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-37-6.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_Am) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_Am[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA Predictors for\", pc),\n         x = \"miRNA\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-1.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-2.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-3.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-4.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-5.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-38-6.png)<!-- -->\n\n# 6 ATP production (GO terms)\n\n## 6.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA expression\nmodels_ATP_prod_GO <- train_models(ATP_prod_GO_pcs, vsd_miRNA)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_ATP_prod_GO <- get_feature_importance(models_ATP_prod_GO)\nhead(feature_importance_ATP_prod_GO, 20)  # Top predictive miRNA\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature       MeanImportance\n##    <chr>                  <dbl>\n##  1 Cluster_2372          0.186 \n##  2 Cluster_17623         0.179 \n##  3 Cluster_14146         0.147 \n##  4 Cluster_9366          0.146 \n##  5 Cluster_9786          0.138 \n##  6 Cluster_4752          0.103 \n##  7 Cluster_10452         0.0896\n##  8 Cluster_17186         0.0813\n##  9 Cluster_4026          0.0807\n## 10 Cluster_3109          0.0777\n## 11 Cluster_17245         0.0775\n## 12 Cluster_4034          0.0746\n## 13 Cluster_17173         0.0728\n## 14 Cluster_9706          0.0688\n## 15 Cluster_14165         0.0676\n## 16 Cluster_16354         0.0654\n## 17 Cluster_1865          0.0629\n## 18 Cluster_9512          0.0624\n## 19 Cluster_1836          0.0612\n## 20 Cluster_12081         0.0600\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_ATP_prod_GO <- evaluate_model_performance(models_ATP_prod_GO, ATP_prod_GO_pcs, vsd_miRNA)\nsummary(performance_results_ATP_prod_GO$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.2543  0.6024  0.7618  0.6743  0.8301  0.8518       2\n```\n\n## 6.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_ATP_prod_GO <- feature_importance_ATP_prod_GO %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_ATP_prod_GO, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA as Predictive Features\",\n       x = \"miRNA\",\n       y = \"Mean Importance\")\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-42-1.png)<!-- -->\n\n``` r\nggplot(performance_results_ATP_prod_GO, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_ATP_prod_GO$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 2 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-43-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_ATP_prod_GO <- pca_ATP_prod_GO$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_ATP_prod_GO_df <- as.data.frame(loadings_ATP_prod_GO) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"ATP_prod_GO_PC\", values_to = \"Loading\")\n\n# View top CpGs contributing most to each PC\ntop_genes_ATP_prod_GO <- loadings_ATP_prod_GO_df %>%\n  group_by(ATP_prod_GO_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 10 CpGs per PC\n\nprint(top_genes_ATP_prod_GO)\n```\n\n```         \n## # A tibble: 440 × 3\n## # Groups:   ATP_prod_GO_PC [22]\n##    gene       ATP_prod_GO_PC Loading\n##    <chr>      <chr>            <dbl>\n##  1 FUN_025802 PC1             -0.328\n##  2 FUN_025367 PC1             -0.316\n##  3 FUN_000960 PC1             -0.313\n##  4 FUN_031975 PC1             -0.311\n##  5 FUN_031686 PC1             -0.290\n##  6 FUN_014565 PC1             -0.277\n##  7 FUN_007016 PC1             -0.246\n##  8 FUN_039808 PC1             -0.243\n##  9 FUN_038166 PC1             -0.242\n## 10 FUN_025823 PC1             -0.208\n## # ℹ 430 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_ATP_prod_GO <- performance_results_ATP_prod_GO$PC[which.max(performance_results_ATP_prod_GO$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_ATP_prod_GO <- ATP_prod_GO_pcs[[best_pc_ATP_prod_GO]]\npredicted_values_ATP_prod_GO <- predict(models_ATP_prod_GO[[best_pc_ATP_prod_GO]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_ATP_prod_GO <- data.frame(\n  Actual = actual_values_ATP_prod_GO,\n  Predicted = predicted_values_ATP_prod_GO\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_ATP_prod_GO, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_ATP_prod_GO),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_ATP_prod_GO), y = max(predicted_values_ATP_prod_GO), \n           label = paste(\"R² =\", round(max(performance_results_ATP_prod_GO$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-45-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_ATP_prod_GO%>%filter(ATP_prod_GO_PC==best_pc_ATP_prod_GO))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   ATP_prod_GO_PC [1]\n##    gene       ATP_prod_GO_PC Loading\n##    <chr>      <chr>            <dbl>\n##  1 FUN_009532 PC5            -0.618 \n##  2 FUN_028263 PC5            -0.319 \n##  3 FUN_031686 PC5            -0.316 \n##  4 FUN_036898 PC5             0.293 \n##  5 FUN_014565 PC5            -0.292 \n##  6 FUN_038166 PC5             0.243 \n##  7 FUN_025823 PC5             0.236 \n##  8 FUN_014564 PC5             0.175 \n##  9 FUN_040783 PC5            -0.140 \n## 10 FUN_038688 PC5            -0.110 \n## 11 FUN_031975 PC5             0.110 \n## 12 FUN_032701 PC5            -0.105 \n## 13 FUN_033885 PC5             0.0843\n## 14 FUN_007016 PC5             0.0843\n## 15 FUN_015065 PC5            -0.0721\n## 16 FUN_025367 PC5             0.0716\n## 17 FUN_025802 PC5            -0.0711\n## 18 FUN_038727 PC5             0.0706\n## 19 FUN_014563 PC5            -0.0693\n## 20 FUN_039808 PC5             0.0617\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above line in plot\nall_pcs_ATP_prod_GO <- performance_results_ATP_prod_GO %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_ATP_prod_GO) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- ATP_prod_GO_pcs[[pc]]\n  predicted_values <- predict(models_ATP_prod_GO[[pc]], as.matrix(vsd_miRNA), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_ATP_prod_GO[performance_results_ATP_prod_GO$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-47-6.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_ATP_prod_GO) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_ATP_prod_GO[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA Predictors for\", pc),\n         x = \"miRNA\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-1.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-2.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-3.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-4.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-5.png)<!-- -->![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-48-6.png)<!-- -->\n\n# 7 Compare\n\nVisualize the relative importance of miRNA in predicting expression for these different gene sets:\n\n``` r\n# Perfomr min-max normalization on the mean importance of miRNA for each group\n# This will place all along a 0-1 range for comparison purposes\nnormalize <- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\n\n# Normalize\ntop_features_Host_AFDW$MeanImportance_norm <- normalize(top_features_Host_AFDW$MeanImportance)\ntop_features_Am$MeanImportance_norm <- normalize(top_features_Am$MeanImportance)\ntop_features_ATP_prod_GO$MeanImportance_norm <- normalize(top_features_ATP_prod_GO$MeanImportance)\n\n# Add group labels\ntop_features_Host_AFDW <- top_features_Host_AFDW %>% mutate(group = \"Host_AFDW\")\ntop_features_Am <- top_features_Am %>% mutate(group = \"Am\")\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO %>% mutate(group = \"ATP_prod_GO\")\n\n# Set rows in same order\ntop_features_Am <- top_features_Am[rownames(top_features_Host_AFDW),]\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO[rownames(top_features_Host_AFDW),]\n\n# Combine\nall_gene_sets <- bind_rows(top_features_Host_AFDW, top_features_Am, top_features_ATP_prod_GO)\n# Remove raw mean importance\nall_gene_sets <- all_gene_sets %>% select(!MeanImportance)\n\n# Wide format: rows = miRNAs, columns = groups\nheatmap_df <- all_gene_sets %>%\n  pivot_wider(names_from = group, values_from = MeanImportance_norm)\n\nheatmap_df <- as.data.frame(heatmap_df)\n\n# Melt into long format for ggplot\nheatmap_long <- melt(heatmap_df, id.vars = \"Feature\")\n\nggplot(heatmap_long, aes(x = variable, y = Feature, fill = value)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme_minimal() +\n  labs(x = \"Group\", y = \"Feature\", fill = \"Importance\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n![](images/22.1-Apul-miRNA-mRNA-machine-learning-gene_sets_files/figure-gfm/unnamed-chunk-49-1.png)<!-- -->\n\nCluster by miRNA importance\n\n``` r\n# Make Feature column the rownames and convert to matrix\nrownames(heatmap_df) <- heatmap_df$Feature\nheatmap_matrix <- as.matrix(heatmap_df[, -1])  # Removes the 'Feature' column\n\npheatmap(\n  heatmap_matrix, \n  cluster_rows = TRUE,  # Clustering miRNAs (rows) by similarity in importance\n  cluster_cols = TRUE,  # Clustering groups (columns)\n  scale = \"none\",  # No scaling (since data is already normalized)\n  show_rownames = TRUE,  # Show miRNA names\n  show_colnames = TRUE,  # Show group names\n  color = colorRampPalette(c(\"white\", \"red\"))(100),  # Red gradient for importance\n  main = \"miRNAs Importance Across Groups\"  # Title of the heatmap\n)\n```\n\n\\[\\](22.1-Apul-miRNA-mRNA-machine-lea\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}