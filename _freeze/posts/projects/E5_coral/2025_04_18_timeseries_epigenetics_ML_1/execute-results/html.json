{
  "hash": "28e1a4ebfc1d81ac2580721ba1033e0c",
  "result": {
    "markdown": "---\ntitle: \"Timeseries molecular: A.pul, epigenetic features to predict expression. Machine learning -- Part 1\"\nauthor: \"Kathleen Durkin\"\ndate: \"2025-04-18\"\ncategories: [\"E5-coral\"]\nformat:\n  html:\n    toc: true\nexecute: \n  eval: FALSE\nengine: knitr\nbibliography: ../../../references.bib\n---\n\n\n[Code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.2-Apul-multiomic-machine-learning.Rmd)\n\n[Rendered code](https://github.com/urol-e5/timeseries_molecular/blob/main/D-Apul/code/22.2-Apul-multiomic-machine-learning.md)\n\nApplying ML model using multiomic predictors -- miRNA + lncRNA + methylation as predictors of gene expression\n\nInputs:\n\n-   RNA counts matrix (raw): `../output/02.20-D-Apul-RNAseq-alignment-HiSat2/apul-gene_count_matrix.csv`\n\n-   Gene sets of interest: `../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/`\n\n-   sRNA/miRNA counts matrix (raw): `../output/03.10-D-Apul-sRNAseq-expression-DESeq2/Apul_miRNA_ShortStack_counts_formatted.txt`\n\n-   lncRNA counts matrix (raw): `../output/08-Apul-lncNRA/counts.txt`\n\n-   WGBS data (processed): Performed in `/timeseries_molecular/D-Apul/output/15.5-Apul-bismark/`, data in [large-file storage](https://gannet.fish.washington.edu/seashell/bu-github/timeseries_molecular/D-Apul/output/15.5-Apul-bismark/).\n\n-   sample metadata: `../../M-multi-species/data/rna_metadata.csv`\n\n# 1 Set up\n\n# 2 Load libraries\n\n``` r\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(DESeq2)\nlibrary(igraph)\nlibrary(psych)\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(WGCNA)\nlibrary(edgeR)\nlibrary(reshape2)\nlibrary(ggcorrplot)\nlibrary(corrplot)\nlibrary(rvest)\nlibrary(purrr)\nlibrary(pheatmap)\nlibrary(glmnet)\nlibrary(caret)\nlibrary(factoextra)\nlibrary(vegan)\nlibrary(ggfortify)\nlibrary(genefilter)\nlibrary(scales)\n```\n\nThe model includes random processes, so set a seed for reproducability. Note: for final results, should we consider bootstrapping to ensure reported results are representative?\n\n``` r\nset.seed(703)\n```\n\n# 3 Load and format data\n\n## 3.1 RNA-seq data (mRNA, miRNA, lncRNA)\n\n``` r\n### mRNA ###\n# raw gene counts data (will filter and variance stabilize)\nApul_genes <- read_csv(\"../output/02.20-D-Apul-RNAseq-alignment-HiSat2/apul-gene_count_matrix.csv\")\n```\n\n```         \n## Rows: 44371 Columns: 41\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (1): gene_id\n## dbl (40): 1A1, 1A10, 1A12, 1A2, 1A8, 1A9, 1B1, 1B10, 1B2, 1B5, 1B9, 1C10, 1C...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n``` r\nApul_genes <- as.data.frame(Apul_genes)\n\n# format gene IDs as rownames (instead of a column)\nrownames(Apul_genes) <- Apul_genes$gene_id\nApul_genes <- Apul_genes%>%select(!gene_id)\n\n\n### miRNA ###\n# raw miRNA counts (will filter and variance stabilize)\nApul_miRNA <- read.table(file = \"../output/03.10-D-Apul-sRNAseq-expression-DESeq2/Apul_miRNA_ShortStack_counts_formatted.txt\", header = TRUE, sep = \"\\t\", check.names = FALSE)\n\n\n### lncRNA ###\n# raw lncRNA counts (will filter and variance stabilize)\nApul_lncRNA_full <- read.table(\"../output/08-Apul-lncRNA/counts.txt\", header = TRUE, sep = \"\\t\", skip = 1)\n\n# Remove info on genomic location, set lncRNA IDs as rownames\nrownames(Apul_lncRNA_full) <- Apul_lncRNA_full$Geneid\nApul_lncRNA <- Apul_lncRNA_full %>% select(-Geneid, -Chr, -Start, -End, -Strand, -Length)\n\n\n\n### load and format metadata ###\nmetadata <- read_csv(\"../../M-multi-species/data/rna_metadata.csv\")%>%select(AzentaSampleName, ColonyID, Timepoint) %>%\n  filter(grepl(\"ACR\", ColonyID))\n```\n\n```         \n## New names:\n## Rows: 117 Columns: 19\n## ── Column specification\n## ──────────────────────────────────────────────────────── Delimiter: \",\" chr\n## (13): SampleName, WellNumber, AzentaSampleName, ColonyID, Timepoint, Sam... dbl\n## (5): SampleNumber, Plate, TotalAmount-ng, Volume-uL, Conc-ng.uL lgl (1):\n## MethodUsedForSpectrophotometry\n## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ\n## Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## • `` -> `...19`\n```\n\n``` r\nmetadata$Sample <- paste0(metadata$ColonyID, \"-\", metadata$Timepoint)\nrownames(metadata) <- metadata$Sample\n```\n\n```         \n## Warning: Setting row names on a tibble is deprecated.\n```\n\n``` r\ncolonies <- unique(metadata$ColonyID)\n\n# Rename gene column names to include full sample info\ncolnames(Apul_genes) <- metadata$Sample[match(colnames(Apul_genes), metadata$AzentaSampleName)]\n\n# Rename miRNA column names to match formatting\ncolnames(Apul_miRNA) <- sub(\"_.*\", \"\", colnames(Apul_miRNA))\ncolnames(Apul_miRNA) <- metadata$Sample[match(colnames(Apul_miRNA), metadata$AzentaSampleName)]\n\n# rename lncRNA colin names to include full sample info\ncolnames(Apul_lncRNA) <- sub(\"...data.\", \"\", colnames(Apul_lncRNA))\ncolnames(Apul_lncRNA) <- sub(\".sorted.bam\", \"\", colnames(Apul_lncRNA))\ncolnames(Apul_lncRNA) <- metadata$Sample[match(colnames(Apul_lncRNA), metadata$AzentaSampleName)]\n```\n\n## 3.2 WGBS data\n\n``` r\n#pull processed files from Gannet \n# Note: Unfortunately we can't use the `cache` feature to make this process more time efficient, as it doesn't support long vectors\n\n# Define the base URL\nbase_url <- \"https://gannet.fish.washington.edu/seashell/bu-github/timeseries_molecular/D-Apul/output/15.5-Apul-bismark/\"\n\n# Read the HTML page\npage <- read_html(base_url)\n\n# Extract links to files\nfile_links <- page %>%\n  html_nodes(\"a\") %>%\n  html_attr(\"href\")\n\n# Filter for files ending in \"processed.txt\"\nprocessed_files <- file_links[grepl(\"processed\\\\.txt$\", file_links)]\n\n# Create full URLs\nfile_urls <- paste0(base_url, processed_files)\n\n# Function to read a file from URL\nread_processed_file <- function(url) {\n  read_table(url, col_types = cols(.default = \"c\"))  # Read as character to avoid parsing issues\n}\n\n# Import all processed files into a list\nprocessed_data <- lapply(file_urls, read_processed_file)\n\n# Name the list elements by file name\nnames(processed_data) <- processed_files\n\n# Print structure of imported data\nstr(processed_data)\n\n# add a header row that has \"CpG\" for the first column and \"sample\" for the second column, which will be populated by the file name \n\nprocessed_data <- Map(function(df, filename) {\n  colnames(df) <- c(\"CpG\", filename)  # Rename columns\n  return(df)\n}, processed_data, names(processed_data))  # Use stored file names\n\n#merge files together by \"CpG\"\nmerged_data <- purrr::reduce(processed_data, full_join, by = \"CpG\")\n\n# Print structure of final merged data\nstr(merged_data)\n```\n\nReplace any NA with 0.\n\n``` r\n# Convert all columns (except \"CpG\") to numeric and replace NAs with 0\nmerged_data <- merged_data %>%\n  mutate(across(-CpG, as.numeric)) %>%  # Convert all except CpG to numeric\n  mutate(across(-CpG, ~ replace_na(.x, 0)))  # Replace NA with 0 in numeric columns\n```\n\n## 3.3 Filter data sets\n\nOnly keep CpGs that have a non-zero value in all samples.\n\n``` r\nfiltered_wgbs <- merged_data %>% filter(if_all(-CpG, ~ .x > 0))\n\n# Ensure it's formatted as a data frame\nfiltered_wgbs <- as.data.frame(filtered_wgbs)\n# Only keep the sample information in the column name. \ncolnames(filtered_wgbs) <- gsub(\"^(.*?)_.*$\", \"\\\\1\", colnames(filtered_wgbs))\n# Set CpG IDs to rownames\nrownames(filtered_wgbs) <- filtered_wgbs$CpG\nfiltered_wgbs <- filtered_wgbs %>% select(-CpG)\n\nnrow(merged_data)\nnrow(filtered_wgbs)\n```\n\nWe had 12,093,025 CpGs before filtering and have only 507 after filtering. This makes sense because most CpGs were not methylated in all samples.\n\nSave filtered set to make code reruns/knitting quicker\n\n``` r\nwrite.csv(filtered_wgbs, \"../output/22.2-Apul-multiomic-machine-learning/filtered-WGBS-CpG-counts.csv\")\n```\n\nIf knitting/rerunning code, we can load in this filtered data here, instead of loading raw counts and reprocessing.\n\n``` r\nfiltered_wgbs <- read.csv(\"../output/22.2-Apul-multiomic-machine-learning/filtered-WGBS-CpG-counts.csv\", row.names = 1, check.names = FALSE)\n```\n\nOnly keep genes, miRNA, and lncRNA that are present in at least one sample\n\n``` r\n# genes\nApul_genes_red <- Apul_genes[rowSums(Apul_genes) != 0, ]\n# miRNA\nApul_miRNA_red <- Apul_miRNA[rowSums(Apul_miRNA) != 0, ]\n# lncRNA\nApul_lncRNA_red <- Apul_lncRNA[rowSums(Apul_lncRNA) != 0, ]\n\ncat(\"Retained \", nrow(Apul_genes_red), \" of \", nrow(Apul_genes), \"genes; \",\n       nrow(Apul_miRNA_red), \" of \", nrow(Apul_miRNA), \" miRNA; and \", \n       nrow(Apul_lncRNA_red), \" of \", nrow(Apul_lncRNA), \" lncRNA\")\n```\n\n```         \n## Retained  35869  of  44371 genes;  51  of  51  miRNA; and  20559  of  24181  lncRNA\n```\n\n*pOverA*: Specifying the minimum count for a proportion of samples for each gene. Setting 3/40 = 0.08. This would retain genes that are only expressed in a single season in a couple of the colonies. Additionally, setting the minimum count so that the minimum number of samples must have a gene count above a certain threshold.\n\ngenes:\n\n``` r\nfilt <- filterfun(pOverA(0.08, 5))\n\n#create filter for the counts data\ngfilt <- genefilter(Apul_genes_red, filt)\n\n#identify genes to keep by count filter\ngkeep <- Apul_genes_red[gfilt,]\n\n#identify gene lists\ngn.keep <- rownames(gkeep)\n\n#gene count data filtered in PoverA, P percent of the samples have counts over A\nApul_genes_filt <- as.data.frame(Apul_genes_red[which(rownames(Apul_genes_red) %in% gn.keep),])\n\n#How many rows do we have before and after filtering?\ncat(\"Pre-filtering:\", nrow(Apul_genes_red), \"; Post-filtering:\", nrow(Apul_genes_filt))\n```\n\n```         \n## Pre-filtering: 35869 ; Post-filtering: 25730\n```\n\nmiRNA:\n\n``` r\nmifilt <- filterfun(pOverA(0.08, 5))\n\n#create filter for the counts data\nmifilt <- genefilter(Apul_miRNA_red, mifilt)\n\n#identify miRNA to keep by count filter\nmikeep <- Apul_miRNA_red[mifilt,]\n\n#identify miRNA to keep by count filter\nmikeep <- Apul_miRNA_red[mifilt,]\n\n#identify miRNA lists\nmi.keep <- rownames(mikeep)\n\n#miRNA count data filtered in PoverA, P percent of the samples have counts over A\nApul_miRNA_filt <- as.data.frame(Apul_miRNA_red[which(rownames(Apul_miRNA_red) %in% mi.keep),])\n\n#How many rows do we have before and after filtering?\ncat(\"Pre-filtering:\", nrow(Apul_miRNA_red), \"; Post-filtering:\", nrow(Apul_miRNA_filt))\n```\n\n```         \n## Pre-filtering: 51 ; Post-filtering: 47\n```\n\nOf the 51 miRNA, 47 were retained. Which were removed?\n\n``` r\nsetdiff(rownames(Apul_miRNA_red), rownames(Apul_miRNA_filt))\n```\n\n```         \n## [1] \"Cluster_5685\"  \"Cluster_11565\" \"Cluster_13647\" \"Cluster_14633\"\n```\n\nlncRNA:\n\n``` r\nlncfilt <- filterfun(pOverA(0.08, 5))\n\n#create filter for the counts data\nlncfilt <- genefilter(Apul_lncRNA_red, lncfilt)\n\n#identify lncRNA to keep by count filter\nlnckeep <- Apul_lncRNA_red[lncfilt,]\n\n#identify lncRNA to keep by count filter\nlnckeep <- Apul_lncRNA_red[lncfilt,]\n\n#identify lncRNA lists\nlnc.keep <- rownames(lnckeep)\n\n#lncRNA count data filtered in PoverA, P percent of the samples have counts over A\nApul_lncRNA_filt <- as.data.frame(Apul_lncRNA_red[which(rownames(Apul_lncRNA_red) %in% lnc.keep),])\n\n#How many rows do we have before and after filtering?\ncat(\"Pre-filtering:\", nrow(Apul_lncRNA_red), \"; Post-filtering:\", nrow(Apul_lncRNA_filt))\n```\n\n```         \n## Pre-filtering: 20559 ; Post-filtering: 16006\n```\n\n## 3.4 Transform data\n\nSet the order of genes, miRNA, lncRNA, wgbs, and metadata to all be the same.\n\n``` r\n# Ensure rownames of metadata are used as the desired column order\ndesired_order <- rownames(metadata)\n\n# Reorder data frame columns\nApul_genes_filt <- Apul_genes_filt[, desired_order]\nApul_miRNA_filt <- Apul_miRNA_filt[, desired_order]\nApul_lncRNA_filt <- Apul_lncRNA_filt[, desired_order]\nfiltered_wgbs <- filtered_wgbs[, desired_order]\n\n# Check they all match\nidentical(rownames(metadata), colnames(Apul_genes_filt))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\nidentical(rownames(metadata), colnames(Apul_miRNA_filt))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\nidentical(rownames(metadata), colnames(Apul_lncRNA_filt))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\nidentical(rownames(metadata), colnames(filtered_wgbs))\n```\n\n```         \n## [1] TRUE\n```\n\nUse a variance stabilized transformation for all four data sets. Variance stabilization essentially tries to make variance independent of the mean\n\n(Is this the most appropriate design to use?)\n\ngenes:\n\n``` r\ndds_genes <- DESeqDataSetFromMatrix(countData = Apul_genes_filt, \n                              colData = metadata, \n                              design = ~Timepoint+ColonyID)\n```\n\n```         \n## converting counts to integer mode\n\n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\n# Variance Stabilizing Transformation\nvsd_genes <- assay(vst(dds_genes, blind = TRUE))\n```\n\nmiRNA:\n\n``` r\ndds_miRNA <- DESeqDataSetFromMatrix(countData = Apul_miRNA_filt, \n                              colData = metadata, \n                              design = ~Timepoint+ColonyID)\n```\n\n```         \n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\n# Variance Stabilizing Transformation\nvsd_miRNA <- varianceStabilizingTransformation(dds_miRNA, blind=TRUE) # Must use varianceStabilizingTransformation() instead of vst() due to few input genes\n```\n\n```         \n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\nvsd_miRNA <- assay(vsd_miRNA)\n```\n\nlncRNA:\n\n``` r\ndds_lncRNA <- DESeqDataSetFromMatrix(countData = Apul_lncRNA_filt, \n                              colData = metadata, \n                              design = ~Timepoint+ColonyID)\n```\n\n```         \n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\n# Variance Stabilizing Transformation\nvsd_lncRNA <- assay(vst(dds_lncRNA, blind = TRUE))\n```\n\nMust round wgbs data to whole integers for normalization - need to return to this to decide if this is appropriate.\n\n``` r\n#round to integers \nfiltered_wgbs<-filtered_wgbs %>% mutate(across(where(is.numeric), round))\n\ndds_wgbs <- DESeqDataSetFromMatrix(countData = filtered_wgbs, \n                              colData = metadata, \n                              design = ~ Timepoint+ColonyID)\n```\n\n```         \n## converting counts to integer mode\n\n## Warning in DESeqDataSet(se, design = design, ignoreRank): some variables in\n## design formula are characters, converting to factors\n\n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n```\n\n``` r\n# Variance Stabilizing Transformation\nvsd_wgbs <- assay(varianceStabilizingTransformation(dds_wgbs, blind = TRUE))\n```\n\n```         \n##   Note: levels of factors in the design contain characters other than\n##   letters, numbers, '_' and '.'. It is recommended (but not required) to use\n##   only letters, numbers, and delimiters '_' or '.', as these are safe characters\n##   for column names in R. [This is a message, not a warning or an error]\n\n## -- note: fitType='parametric', but the dispersion trend was not well captured by the\n##    function: y = a/x + b, and a local regression fit was automatically substituted.\n##    specify fitType='local' or 'mean' to avoid this message next time.\n```\n\n## 3.5 Islolate gene sets\n\nRead in gene set tables\n\n``` r\n# genes from WGCNA modules significantly correlated with host biomass\nHost_AFDW <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/Host_AFDW.mg.cm2_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n# genes from WGCNA modules significantly correlated with symbiont photosynthesis\nAm <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/Am_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n# GO terms related to energy production/usage\nATP_production_GO <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/ATP_production_GO_terms_gene_counts.tab\", sep=\"\\t\", header=TRUE)\nenergy_GO <- read.table(\"../output/21-Apul-annotate-miRNA-mRNA-WGCNA/filtered-gene-sets/energy_usage_storage_GO_terms_gene_counts.tab\", sep=\"\\t\", header=TRUE)\n```\n\nIsolate filtered counts by gene set\n\n``` r\nvsd_Host_AFDW <- vsd_genes[rownames(vsd_genes) %in% Host_AFDW$gene_id,]\nvsd_Am <- vsd_genes[rownames(vsd_genes) %in% Am$gene_id,]\nvsd_ATP_production_GO <- vsd_genes[rownames(vsd_genes) %in% ATP_production_GO$gene_id,]\nvsd_energy_GO <- vsd_genes[rownames(vsd_genes) %in% energy_GO$gene_id,]\n```\n\n# 4 Feature selection\n\nReduce dimensionality through feature selection.\n\n``` r\nnrow(vsd_genes)\n```\n\n```         \n## [1] 25730\n```\n\n``` r\nnrow(vsd_miRNA)\n```\n\n```         \n## [1] 47\n```\n\n``` r\nnrow(vsd_lncRNA)\n```\n\n```         \n## [1] 16006\n```\n\n``` r\nnrow(vsd_wgbs)\n```\n\n```         \n## [1] 507\n```\n\n``` r\ncat(\"\\n\")\n```\n\n``` r\nnrow(vsd_Host_AFDW)\n```\n\n```         \n## [1] 793\n```\n\n``` r\nnrow(vsd_Am)\n```\n\n```         \n## [1] 5746\n```\n\n``` r\nnrow(vsd_ATP_production_GO)\n```\n\n```         \n## [1] 22\n```\n\n``` r\nnrow(vsd_energy_GO)\n```\n\n```         \n## [1] 284\n```\n\nThe genes, lncRNA, and WGBS sets are very large, so we need to reduce using dimensionality reduction. We'll need to do the same for the gene sets, which are also fairly large.\n\n## 4.1 All genes\n\n``` r\n# Perform PCA on gene expression matrix\npca_genes <- prcomp(t(vsd_genes), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_genes <- summary(pca_genes)$importance[2, ]  # Cumulative variance explained\nnum_pcs_genes <- min(which(cumsum(explained_var_genes) > 0.95))  # Keep PCs that explain 95% variance\n\ngenes_pcs <- as.data.frame(pca_genes$x[, 1:num_pcs_genes])  # Extract selected PCs\ndim(genes_pcs)\n```\n\n```         \n## [1] 40 30\n```\n\n30 PCs summarize 95% of the explained variance in all gene expression\n\n## 4.2 lncRNA\n\n``` r\n# Perform PCA on lncRNA expression matrix\npca_lncRNA <- prcomp(t(vsd_lncRNA), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_lncRNA <- summary(pca_lncRNA)$importance[2, ]  # Cumulative variance explained\nnum_pcs_lncRNA <- min(which(cumsum(explained_var_lncRNA) > 0.95))  # Keep PCs that explain 95% variance\n\nlncRNA_pcs <- as.data.frame(pca_lncRNA$x[, 1:num_pcs_lncRNA])  # Extract selected PCs\ndim(lncRNA_pcs)\n```\n\n```         \n## [1] 40 31\n```\n\n31 PCs summarize 95% of the explained variance in lncRNA expression\n\n## 4.3 miRNA\n\n``` r\n# Perform PCA on miRNA expression matrix\npca_miRNA <- prcomp(t(vsd_miRNA), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_miRNA <- summary(pca_miRNA)$importance[2, ]  # Cumulative variance explained\nnum_pcs_miRNA <- min(which(cumsum(explained_var_miRNA) > 0.95))  # Keep PCs that explain 95% variance\n\nmiRNA_pcs <- as.data.frame(pca_miRNA$x[, 1:num_pcs_miRNA])  # Extract selected PCs\ndim(miRNA_pcs)\n```\n\n```         \n## [1] 40 20\n```\n\n20 PCs summarize 95% of the explained variance in miRNA expression\n\n## 4.4 WGBS\n\n``` r\n# Perform PCA on WGBS CpG matrix\npca_wgbs <- prcomp(t(vsd_wgbs), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_wgbs <- summary(pca_wgbs)$importance[2, ]  # Cumulative variance explained\nnum_pcs_wgbs <- min(which(cumsum(explained_var_wgbs) > 0.95))  # Keep PCs that explain 95% variance\n\nwgbs_pcs <- as.data.frame(pca_wgbs$x[, 1:num_pcs_wgbs])  # Extract selected PCs\ndim(wgbs_pcs)\n```\n\n```         \n## [1] 40 30\n```\n\n30 PCs summarize 95% of the explained variance in methylation\n\n## 4.5 Host_AFDW\n\n``` r\n# Perform PCA on gene set matrix\npca_Host_AFDW <- prcomp(t(vsd_Host_AFDW), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_Host_AFDW <- summary(pca_Host_AFDW)$importance[2, ]  # Cumulative variance explained\nnum_pcs_Host_AFDW <- min(which(cumsum(explained_var_Host_AFDW) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nHost_AFDW_pcs <- as.data.frame(pca_Host_AFDW$x[, 1:num_pcs_Host_AFDW])  # Extract selected PCs\n\ndim(Host_AFDW_pcs)\n```\n\n```         \n## [1] 40 29\n```\n\n29 PCs summarize 95% of the explained variance in genes associated with host biomass (Host AFDW)\n\n## 4.6 Am\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene set expression matrix\npca_Am <- prcomp(t(vsd_Am), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_Am <- summary(pca_Am)$importance[2, ]  # Cumulative variance explained\nnum_pcs_Am <- min(which(cumsum(explained_var_Am) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nAm_pcs <- as.data.frame(pca_Am$x[, 1:num_pcs_Am])  # Extract selected PCs\n\ndim(Am_pcs)\n```\n\n```         \n## [1] 40 30\n```\n\n30 PCs summarize 95% of the explained variance in genes associated with symbiont photosynthesis (Am)\n\n## 4.7 ATP production GO terms\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene set expression matrix\npca_ATP_prod_GO <- prcomp(t(vsd_ATP_production_GO), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_ATP_prod_GO <- summary(pca_ATP_prod_GO)$importance[2, ]  # Cumulative variance explained\nnum_pcs_ATP_prod_GO <- min(which(cumsum(explained_var_ATP_prod_GO) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nATP_prod_GO_pcs <- as.data.frame(pca_ATP_prod_GO$x[, 1:num_pcs_ATP_prod_GO])  # Extract selected PCs\n\ndim(ATP_prod_GO_pcs)\n```\n\n```         \n## [1] 40 11\n```\n\n11 PCs summarize 95% of the explained variance in genes annotated with ATP production GO terms\n\n## 4.8 Energy usage/storage GO terms\n\nReduce dimensionality\n\n``` r\n# Perform PCA on gene set expression matrix\npca_energy_GO <- prcomp(t(vsd_energy_GO), scale. = TRUE)\n\n# Select top PCs that explain most variance (e.g., top 50 PCs)\nexplained_var_energy_GO <- summary(pca_energy_GO)$importance[2, ]  # Cumulative variance explained\nnum_pcs_energy_GO <- min(which(cumsum(explained_var_energy_GO) > 0.95))  # Keep PCs that explain 95% cumulative variance\n\nenergy_GO_pcs <- as.data.frame(pca_energy_GO$x[, 1:num_pcs_energy_GO])  # Extract selected PCs\n\ndim(energy_GO_pcs)\n```\n\n```         \n## [1] 40 27\n```\n\n27 PCs summarize 95% of the explained variance in genes annotated with ATP production GO terms\n\n# 5 Merge predictor features\n\n## 5.1 Merge reduced datasets\n\nI want to use miRNA, lncRNA, and methylation (WGBS) as predictors for gene expression, so I need to merge the features of these three data sets.\n\n``` r\n# Note which dataset each lncRNA and WGBS PC is associated with\ncolnames(lncRNA_pcs) <- paste0(colnames(lncRNA_pcs), \"_lncRNA\")\ncolnames(miRNA_pcs) <- paste0(colnames(miRNA_pcs), \"_miRNA\")\ncolnames(wgbs_pcs) <- paste0(colnames(wgbs_pcs), \"_WGBS\")\n\n# Triple check that all three data frames have sample names in the same order\nidentical(rownames(lncRNA_pcs), rownames(wgbs_pcs))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\nidentical(rownames(lncRNA_pcs), rownames(miRNA_pcs))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\n# Bind (stack dataframes horizontally)\nfull_pred <- cbind(lncRNA_pcs, miRNA_pcs, wgbs_pcs)\n\nhead(full_pred)\n```\n\n```         \n##             PC1_lncRNA PC2_lncRNA PC3_lncRNA PC4_lncRNA  PC5_lncRNA PC6_lncRNA\n## ACR-225-TP1 -16.652946  73.328741  -4.900662   23.63265 -15.5434633 18.6993987\n## ACR-225-TP2 -64.415273 -39.989770  25.849109   31.36694  -2.7418550 16.8817935\n## ACR-225-TP3   7.426632   3.836323   2.613068  -18.79839  -2.1512861  8.4294017\n## ACR-225-TP4 -44.525340 -22.405730 -26.727351  -12.11801   9.4110284  5.1441162\n## ACR-229-TP1 -56.226873   1.285908  -4.624646  -17.85891   0.4800111  0.9084579\n## ACR-229-TP2 -23.046364  25.786839  21.772068  -18.73687  -7.1031312 -0.7275392\n##             PC7_lncRNA PC8_lncRNA PC9_lncRNA PC10_lncRNA PC11_lncRNA\n## ACR-225-TP1  -6.606146   3.907170 -24.668541    2.700613  -19.570934\n## ACR-225-TP2  -6.297825  10.732377  42.589155   24.811017  -26.751535\n## ACR-225-TP3  -1.467871 -17.039753  27.992788  -71.853887  -42.845320\n## ACR-225-TP4  18.329047  -4.863639   6.499017  -61.577003  -25.414126\n## ACR-229-TP1  25.162031 -37.787739  -4.995677   10.091432    5.796247\n## ACR-229-TP2   9.430113 -63.615657  14.032926   20.235658   -1.191159\n##             PC12_lncRNA PC13_lncRNA PC14_lncRNA PC15_lncRNA PC16_lncRNA\n## ACR-225-TP1   14.521305   -2.262914  -41.957968    5.820290   8.3988888\n## ACR-225-TP2   23.931986    6.942925    1.163011   -9.992572   8.1105349\n## ACR-225-TP3  -13.762339    1.103723   -5.710279   -5.183437  -3.1364670\n## ACR-225-TP4  -11.896056   22.104165    2.714092    2.601415   0.1158628\n## ACR-229-TP1   -9.434515    6.262263   -1.934178    7.166601   7.3463125\n## ACR-229-TP2  -12.910408   -6.829857    2.837974   18.804798  10.0055494\n##             PC17_lncRNA PC18_lncRNA PC19_lncRNA PC20_lncRNA PC21_lncRNA\n## ACR-225-TP1  -11.414071   -8.144753   -7.129114   -5.766714   0.3039167\n## ACR-225-TP2    8.257330  -12.779865    2.255193   14.444535  -3.5473589\n## ACR-225-TP3    5.373520    4.439530    4.525741   -6.271834   2.2093061\n## ACR-225-TP4   -7.026531   -6.954813   -7.076966   10.860342  -3.9469359\n## ACR-229-TP1    3.321744    4.570894    3.865441    6.583016  -1.3653023\n## ACR-229-TP2   -7.968622   12.486084    7.597807    5.465330  -3.8226527\n##             PC22_lncRNA PC23_lncRNA  PC24_lncRNA PC25_lncRNA PC26_lncRNA\n## ACR-225-TP1  3.33621967   6.2624463   7.12577766  -1.1624725  -2.4803030\n## ACR-225-TP2 10.36360595  -2.2710427   0.09666598   0.8515688  -0.3120913\n## ACR-225-TP3  1.10178240  -3.6705225 -10.74023891  14.7092812 -31.1962830\n## ACR-225-TP4 -0.01032393   9.5566511   8.46526275 -15.0129144  38.2439731\n## ACR-229-TP1  9.56966429   0.5830298   4.66792421  -5.1182417   0.3595885\n## ACR-229-TP2  0.79390943  15.1861516  15.35476257  -4.6161473   8.6759452\n##             PC27_lncRNA PC28_lncRNA PC29_lncRNA PC30_lncRNA PC31_lncRNA\n## ACR-225-TP1   -3.354632   -1.019635  -3.4401091    1.043338    1.360794\n## ACR-225-TP2    1.365050   -1.387810   0.7383812   -1.806439   -1.272689\n## ACR-225-TP3    7.629537   25.437233   5.4302405   13.490468   -3.264919\n## ACR-225-TP4   -7.281209  -28.557006  -3.6872263  -16.900518    5.777254\n## ACR-229-TP1   -3.147646   -6.305934  11.2241848    3.291629   -5.355760\n## ACR-229-TP2    6.612615    5.732498  32.6675771   -2.783756    1.239237\n##             PC1_miRNA   PC2_miRNA  PC3_miRNA   PC4_miRNA   PC5_miRNA  PC6_miRNA\n## ACR-225-TP1  2.798740 -1.60103790  0.3902826 -2.78416979  2.89850841 -1.9126175\n## ACR-225-TP2 -2.006672  2.35384472  3.3094108  0.68396712  1.00642619 -2.7188868\n## ACR-225-TP3  3.402678  0.03989579  2.7920820 -0.98471667 -0.04969853  0.5269023\n## ACR-225-TP4  1.743162 -0.74508972  1.7601194 -1.62529700  2.43570856 -1.1716437\n## ACR-229-TP1 -1.684434 -3.73740125 -0.7669801 -2.64001620  2.58499410 -1.9776859\n## ACR-229-TP2 -3.660540 -1.78878170  1.2071028 -0.01069494  0.49089503 -0.8033196\n##              PC7_miRNA  PC8_miRNA   PC9_miRNA PC10_miRNA  PC11_miRNA PC12_miRNA\n## ACR-225-TP1  0.4024505 -1.7868230  1.17633110 -0.8139795  0.84528773 -0.5757136\n## ACR-225-TP2 -0.2493649 -3.5015635 -0.01719534 -0.3481687 -1.19223681 -0.5321468\n## ACR-225-TP3  3.1542881 -3.1946856  0.81511665 -2.1479615  0.02257447 -0.3650203\n## ACR-225-TP4 -0.6827463 -1.1612550  1.71987368 -1.2097857 -0.69841499 -0.4210997\n## ACR-229-TP1  1.3091331  0.6514011 -1.91405432  0.4606718  1.11677702 -1.7419935\n## ACR-229-TP2  1.2042832  1.1837645 -2.59581592  0.8979452 -0.30985309  1.1755465\n##             PC13_miRNA PC14_miRNA PC15_miRNA  PC16_miRNA  PC17_miRNA PC18_miRNA\n## ACR-225-TP1  0.2554555 -0.1297357 -0.4883509  1.38110641  0.16749476 -0.5965978\n## ACR-225-TP2 -0.1981750 -0.9609219 -0.1396524 -1.67384952  1.62178054 -0.4466742\n## ACR-225-TP3 -1.5374296  0.6401065 -0.5767027 -0.68668664 -1.05804473 -0.3272770\n## ACR-225-TP4  1.8524932  0.6855648 -0.5112841  0.07760664 -0.18793380  0.9265410\n## ACR-229-TP1  0.8215141  1.3028887  0.4432213 -0.30498022  0.09989403  0.2487335\n## ACR-229-TP2 -0.6203428  0.6040737 -0.4276845 -1.61714671  0.63347585 -0.5473325\n##              PC19_miRNA  PC20_miRNA   PC1_WGBS   PC2_WGBS   PC3_WGBS   PC4_WGBS\n## ACR-225-TP1 -0.17349545  0.03586059 -47.371386 -7.4281666 -15.911669 -1.9801404\n## ACR-225-TP2 -0.89143615  0.46667292   3.763531 -8.1177745   5.056844 -0.5106781\n## ACR-225-TP3  0.34320992 -0.41047389   3.784780 -7.2719899   6.449627  2.5534316\n## ACR-225-TP4  0.37380836 -0.74593072   3.149372 -6.2894599   3.109440  3.4838126\n## ACR-229-TP1 -0.39021763 -0.16141186   4.620443  0.7863283  -1.764767 -5.1060003\n## ACR-229-TP2  0.08006026  0.19192730   4.614269 -0.2214307  -3.036966 -4.6587985\n##             PC5_WGBS    PC6_WGBS  PC7_WGBS    PC8_WGBS   PC9_WGBS  PC10_WGBS\n## ACR-225-TP1 4.817743  -1.2987551  2.268259  -0.5752089  2.1437705 -0.1523134\n## ACR-225-TP2 1.632951 -10.3927327  4.563777  -4.8349365  1.9806328 -6.6701787\n## ACR-225-TP3 6.117338  -5.9982021  4.682503 -13.7502728  7.4823613  1.5927329\n## ACR-225-TP4 2.596055  -7.8141716  4.917917  -9.3518752  2.0215227  0.8340144\n## ACR-229-TP1 3.500710   0.7757339 12.436617   5.2231857 -2.6032216  4.1532102\n## ACR-229-TP2 3.681378  -0.4584829 10.458070   5.2523072 -0.6308566 -0.2433186\n##              PC11_WGBS  PC12_WGBS  PC13_WGBS  PC14_WGBS  PC15_WGBS  PC16_WGBS\n## ACR-225-TP1  1.1999889 -0.2133351 -0.2022223  1.1702454 -0.3240623 -0.4613926\n## ACR-225-TP2 -2.0992700  3.7117384 -2.7824001  1.8365265 -3.3164335 -1.6319654\n## ACR-225-TP3 -2.0633762 -5.4812552  3.0632119 -2.9768045 -2.4804053 -1.7654961\n## ACR-225-TP4 -0.2796565  5.7409197 -0.9415802  1.2707304  7.0430354  2.5553601\n## ACR-229-TP1 -0.2271934 -0.7732254  0.2543079  2.5133914  0.4451549  4.8256273\n## ACR-229-TP2  1.6555274 -0.6643908  1.0330861 -0.2804019  1.0525279  0.4234749\n##              PC17_WGBS   PC18_WGBS  PC19_WGBS PC20_WGBS  PC21_WGBS  PC22_WGBS\n## ACR-225-TP1  0.2556796  0.04848013  0.1379598  0.163844  0.4163461 -0.2478828\n## ACR-225-TP2  4.0691392  6.21452411 -5.3580039 -2.696985  1.7539712  1.0939080\n## ACR-225-TP3  2.3378453 -6.08085670  2.2829177  3.437195 -0.2178858  3.0976112\n## ACR-225-TP4 -2.2242573  2.59441480  3.1965907 -1.718827 -1.3134491 -6.1534216\n## ACR-229-TP1  1.9901032  1.68799711 -2.4572699  4.012089 -1.8905085  1.9925271\n## ACR-229-TP2  1.3819023  0.49627020  0.2958164 -1.487058  2.5702578  1.6684459\n##               PC23_WGBS  PC24_WGBS  PC25_WGBS   PC26_WGBS   PC27_WGBS\n## ACR-225-TP1 -0.01477822 -0.4024602  0.2823349  0.09620127  0.19132873\n## ACR-225-TP2 -2.83840621  0.3542538  2.0758895  1.60663820  0.05388139\n## ACR-225-TP3 -0.23924425 -0.4659744 -0.3007130  0.26198619 -0.23169049\n## ACR-225-TP4  2.94984959  0.9442884 -2.2553056 -0.51859589 -0.02708711\n## ACR-229-TP1  2.35415772 -2.9270652  0.4592204  2.00858242 -0.73890630\n## ACR-229-TP2  0.25382606  1.4273242 -0.6150447 -2.84497287  0.11903672\n##               PC28_WGBS   PC29_WGBS  PC30_WGBS\n## ACR-225-TP1  0.02296127  0.31068945 -0.3600702\n## ACR-225-TP2  2.45735398 -0.01454505  0.6784057\n## ACR-225-TP3 -1.85458312 -0.53013267 -0.3520069\n## ACR-225-TP4  0.20395801 -0.80341258 -1.4896686\n## ACR-229-TP1  0.24333281 -2.07909037 -2.5953092\n## ACR-229-TP2 -3.70723373 -2.71780970  3.1118242\n```\n\n## 5.2 Merge raw datsets\n\nI also want to try using individiual miRNA/lncRNA/CpGs as predictors, instead of the reduced PCs. Let's also create a merged dataset that contains the variance stabilized counts for all miRNA, lncRNA, and CpGs.\n\n``` r\n# Triple check that all three data frames have sample names in the same order\nidentical(colnames(vsd_lncRNA), colnames(vsd_miRNA))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\nidentical(colnames(vsd_lncRNA), colnames(vsd_wgbs))\n```\n\n```         \n## [1] TRUE\n```\n\n``` r\n# Bind (stack dataframes vertically, so that they match by column/sample)\nfull_pred_counts <- rbind(vsd_lncRNA, vsd_miRNA, vsd_wgbs)\n\n# Transform so that samples are on rows and features are in columns\nfull_pred_counts <- t(full_pred_counts)\n\ndim(full_pred_counts)\n```\n\n```         \n## [1]    40 16560\n```\n\nOk, now we can run the model!\n\nThe below code uses both predictors (miRNA+lncRNA+CpGs) and responses (genes) that have been reduced using PCs.\n\n# 7 All genes\n\nLet's start by just throwing all our genes in.\n\nmiRNA + lncRNA + methylation as predictors of expression for all genes\n\n## 7.1 The model\n\n``` r\n# Ensure sample matching between gene and miRNA+lncRNA+methylation PCs\ncommon_samples <- intersect(rownames(genes_pcs), rownames(full_pred))\ngenes_pcs <- genes_pcs[common_samples, ]\nfull_pred <- full_pred[common_samples, ]\n```\n\nTrain elastic models to predict gene expression PCs from miRNA+lncRNA+methylation PCs.\n\n``` r\ntrain_models <- function(response_pcs, predictor_pcs) {\n  models <- list()\n  \n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]  # Gene expression PC\n    X <- as.matrix(predictor_pcs)  # miRNA+lncRNA+methylation PCs as predictors\n    \n    # Train elastic net model (alpha = 0.5 for mix of LASSO & Ridge)\n    model <- cv.glmnet(X, y, alpha = 0.05)\n    \n    models[[pc]] <- model\n  }\n  \n  return(models)\n}\n\n# Train models predicting gene expression PCs from miRNA+lncRNA+methylation PCs\nmodels_all <- train_models(genes_pcs, full_pred)\n```\n\nExtract feature importance.\n\n``` r\nget_feature_importance <- function(models) {\n  importance_list <- lapply(models, function(model) {\n    coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Convert to regular matrix & remove intercept\n    \n    # Convert to data frame\n    coefs_df <- data.frame(Feature = rownames(coefs), Importance = as.numeric(coefs))\n    \n    return(coefs_df)\n  })\n  \n  # Combine feature importance across all predicted gene PCs\n  importance_df <- bind_rows(importance_list) %>%\n    group_by(Feature) %>%\n    summarize(MeanImportance = mean(abs(Importance)), .groups = \"drop\") %>%\n    arrange(desc(MeanImportance))\n  \n  return(importance_df)\n}\n\nfeature_importance_all <- get_feature_importance(models_all)\nhead(feature_importance_all, 20)  # Top 20 predictive epigenetic features\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature    MeanImportance\n##    <chr>               <dbl>\n##  1 PC16_miRNA          1.03 \n##  2 PC18_miRNA          0.895\n##  3 PC9_miRNA           0.687\n##  4 PC17_miRNA          0.626\n##  5 PC14_miRNA          0.618\n##  6 PC11_miRNA          0.614\n##  7 PC15_miRNA          0.600\n##  8 PC7_miRNA           0.595\n##  9 PC12_miRNA          0.586\n## 10 PC10_miRNA          0.577\n## 11 PC19_miRNA          0.576\n## 12 PC20_miRNA          0.562\n## 13 PC5_miRNA           0.448\n## 14 PC6_miRNA           0.442\n## 15 PC13_miRNA          0.438\n## 16 PC4_miRNA           0.418\n## 17 PC2_miRNA           0.410\n## 18 PC8_miRNA           0.397\n## 19 PC3_miRNA           0.365\n## 20 PC1_miRNA           0.327\n```\n\nEvaluate performance.\n\n``` r\nevaluate_model_performance <- function(models, response_pcs, predictor_pcs) {\n  results <- data.frame(PC = colnames(response_pcs), R2 = NA)\n  \n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]\n    X <- as.matrix(predictor_pcs)\n    \n    model <- models[[pc]]\n    preds <- predict(model, X, s = \"lambda.min\")\n    \n    R2 <- cor(y, preds)^2  # R-squared metric\n    results[results$PC == pc, \"R2\"] <- R2\n  }\n  \n  return(results)\n}\n\nperformance_results_all <- evaluate_model_performance(models_all, genes_pcs, full_pred)\nsummary(performance_results_all$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.1811  0.8549  0.9812  0.8504  0.9984  0.9992       4\n```\n\n## 7.2 Results\n\nPlot results.\n\n``` r\n# Select top 20 predictive features\ntop_features_all <- feature_importance_all %>% top_n(20, MeanImportance)\n\n# Plot\nggplot(top_features_all, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"Top 20 Predictive Epigenetic Features\",\n       x = \"Feature\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-35-1.png)<!-- -->\n\n``` r\nggplot(performance_results_all, aes(x = PC, y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_all$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 4 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-36-1.png)<!-- -->\n\n``` r\n# Mean explained variance\nmean(!is.na(performance_results_all$R2))\n```\n\n```         \n## [1] 0.8666667\n```\n\nView components associated with PCs (need to fix this code to work with the hybrid predictive input)\n\n``` r\n# # Get the PCA rotation (loadings) matrix from each PCA\n# lncRNA_loadings <- pca_lncRNA$rotation  # Each column corresponds to a PC\n# miRNA_loadings <- pca_miRNA$rotation  # Each column corresponds to a PC\n# wgbs_loadings <- pca_wgbs$rotation  # Each column corresponds to a PC\n# \n# # Identify the top predictive PCs (from feature importance)\n# all_top_predictive_pcs <- feature_importance_all$Feature[1:5]  # Select top 5 most predictive PCs\n# \n# # Extract the loadings for those PCs\n# top_loadings <- wgbs_loadings[, top_predictive_pcs, drop = FALSE]\n# \n# # Convert to data frame and reshape for plotting\n# top_loadings_df <- as.data.frame(top_loadings) %>%\n#   rownames_to_column(var = \"CpG\") %>%\n#   pivot_longer(-CpG, names_to = \"Methylation_PC\", values_to = \"Loading\")\n# \n# # View top CpGs contributing most to each PC\n# top_cpgs <- top_loadings_df %>%\n#   group_by(Methylation_PC) %>%\n#   arrange(desc(abs(Loading))) %>%\n#   slice_head(n = 20)  # Select top 10 CpGs per PC\n# \n# print(top_cpgs)\n```\n\nView top 20 CpGs associated with PC9 (the most important PC)\n\n``` r\n# print(top_cpgs%>%filter(Methylation_PC==\"PC9\"))\n```\n\n``` r\n# ggplot(top_cpgs, aes(x = reorder(CpG, abs(Loading)), y = Loading, fill = Methylation_PC)) +\n#   geom_bar(stat = \"identity\") +\n#   coord_flip() +  \n#   theme_minimal() +\n#   labs(title = \"Top CpGs Contributing to Most Predictive Methylation PCs\",\n#        x = \"CpG Site\",\n#        y = \"Loading Strength\") +\n#   facet_grid(~Methylation_PC, scales = \"free_y\")  # Separate plots for each PC\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc <- performance_results_all$PC[which.max(performance_results_all$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values <- genes_pcs[[best_pc]]\npredicted_values <- predict(models_all[[best_pc]], as.matrix(full_pred), s = \"lambda.min\")\n\n# Create data frame\nprediction_df <- data.frame(\n  Actual = actual_values,\n  Predicted = predicted_values\n)\n\n# Scatter plot with regression line\nggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n           label = paste(\"R² =\", round(max(performance_results_all$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-41-1.png)<!-- -->\n\n``` r\nggplot(performance_results_all, aes(y = R2)) +\n  geom_boxplot(fill = \"lightblue\", alpha = 0.7) +\n  theme_minimal() +\n  labs(title = \"Distribution of Predictive Performance (R²) Across PCs\",\n       y = \"R² (Variance Explained)\")\n```\n\n```         \n## Warning: Removed 4 rows containing non-finite outside the scale range\n## (`stat_boxplot()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-42-1.png)<!-- -->\n\n``` r\n# Compute correlation between actual and predicted gene expression PCs\npredicted_matrix <- sapply(models_all, function(m) predict(m, as.matrix(full_pred), s = \"lambda.min\"))\n\n# Ensure matrices are the same size\npredicted_matrix <- predicted_matrix[, colnames(genes_pcs), drop = FALSE]  # Align columns\n\n# remove 0 variance columns\npredicted_matrix <- predicted_matrix[, apply(predicted_matrix, 2, function(col) sd(col, na.rm = TRUE) > 0)]\n\n# Compute correlation matrix, handling missing values\ncor_matrix <- cor(predicted_matrix, as.matrix(genes_pcs), use = \"complete.obs\")\n\n# Replace NA or Inf values with zero\ncor_matrix[is.na(cor_matrix) | is.infinite(cor_matrix)] <- 0  \n\n# Plot heatmap\npheatmap(cor_matrix, color = colorRampPalette(c(\"blue\", \"white\", \"red\"))(100),\n         main = \"Correlation Between Actual and Predicted Gene Expression PCs\",\n         cluster_rows = FALSE,\n         cluster_cols = FALSE,\n         fontsize = 10)\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-43-1.png)<!-- -->\n\n# 8 Host biomass (Host_AFDW)\n\n## 8.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression.\n\n``` r\ntrain_models <- function(response_pcs, predictor_pcs) {\n  models <- list()\n  \n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]  # Gene expression PC\n    X <- as.matrix(predictor_pcs)  # miRNA+lncRNA+methylation PCs as predictors\n    \n    # Train elastic net model (alpha = 0.5 for mix of LASSO & Ridge)\n    model <- cv.glmnet(X, y, alpha = 0.5)\n    \n    models[[pc]] <- model\n  }\n  \n  return(models)\n}\n\n# Train models predicting gene expression PCs from miRNA+lncRNA+methylation PCs\nmodels_Host_AFDW <- train_models(Host_AFDW_pcs, full_pred)\n```\n\nExtract feature importance.\n\n``` r\nget_feature_importance <- function(models) {\n  importance_list <- lapply(models, function(model) {\n    coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Convert to regular matrix & remove intercept\n    \n    # Convert to data frame\n    coefs_df <- data.frame(Feature = rownames(coefs), Importance = as.numeric(coefs))\n    \n    return(coefs_df)\n  })\n  \n  # Combine feature importance across all predicted gene PCs\n  importance_df <- bind_rows(importance_list) %>%\n    group_by(Feature) %>%\n    summarize(MeanImportance = mean(abs(Importance)), .groups = \"drop\") %>%\n    arrange(desc(MeanImportance))\n  \n  return(importance_df)\n}\n\nfeature_importance_Host_AFDW <- get_feature_importance(models_Host_AFDW)\nhead(feature_importance_Host_AFDW, 20)  # Top predictive features\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature    MeanImportance\n##    <chr>               <dbl>\n##  1 PC20_miRNA         0.0906\n##  2 PC18_miRNA         0.0771\n##  3 PC17_miRNA         0.0762\n##  4 PC19_miRNA         0.0760\n##  5 PC16_miRNA         0.0753\n##  6 PC8_miRNA          0.0689\n##  7 PC3_miRNA          0.0674\n##  8 PC13_miRNA         0.0672\n##  9 PC11_miRNA         0.0669\n## 10 PC7_miRNA          0.0663\n## 11 PC9_miRNA          0.0581\n## 12 PC27_WGBS          0.0527\n## 13 PC26_WGBS          0.0516\n## 14 PC2_miRNA          0.0505\n## 15 PC14_miRNA         0.0471\n## 16 PC5_miRNA          0.0463\n## 17 PC12_miRNA         0.0440\n## 18 PC21_WGBS          0.0430\n## 19 PC13_WGBS          0.0430\n## 20 PC11_WGBS          0.0354\n```\n\nEvaluate performance.\n\n``` r\nevaluate_model_performance <- function(models, response_pcs, predictor_pcs) {\n  results <- data.frame(PC = colnames(response_pcs), R2 = NA)\n\n  for (pc in colnames(response_pcs)) {\n    y <- response_pcs[[pc]]\n    X <- as.matrix(predictor_pcs)\n\n    model <- models[[pc]]\n    preds <- predict(model, X, s = \"lambda.min\")\n\n    R2 <- cor(y, preds)^2  # R-squared metric\n    results[results$PC == pc, \"R2\"] <- R2\n  }\n\n  return(results)\n}\n\nperformance_results_Host_AFDW <- evaluate_model_performance(models_Host_AFDW, Host_AFDW_pcs, full_pred)\nsummary(performance_results_Host_AFDW$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.2360  0.8370  0.9701  0.8500  0.9960  0.9997       7\n```\n\n## 8.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_Host_AFDW <- feature_importance_Host_AFDW %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_Host_AFDW, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"lncRNA, miRNA, and methylation as predictive features\",\n       x = \"Features\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-47-1.png)<!-- -->\n\n``` r\nggplot(performance_results_Host_AFDW, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_Host_AFDW$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 7 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-48-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_Host_AFDW <- pca_Host_AFDW$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_Host_AFDW_df <- as.data.frame(loadings_Host_AFDW) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"Host_AFDW_PC\", values_to = \"Loading\")\n\n# View top genes contributing most to each PC\ntop_genes_Host_AFDW <- loadings_Host_AFDW_df %>%\n  group_by(Host_AFDW_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 20 genes per PC\n\nprint(top_genes_Host_AFDW)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   Host_AFDW_PC [40]\n##    gene       Host_AFDW_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_010504 PC1           0.0593\n##  2 FUN_033160 PC1           0.0587\n##  3 FUN_042402 PC1           0.0580\n##  4 FUN_026248 PC1           0.0579\n##  5 FUN_010505 PC1           0.0578\n##  6 FUN_030089 PC1           0.0576\n##  7 FUN_027385 PC1           0.0575\n##  8 FUN_013949 PC1           0.0573\n##  9 FUN_008069 PC1           0.0572\n## 10 FUN_036450 PC1           0.0570\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_Host_AFDW <- performance_results_Host_AFDW$PC[which.max(performance_results_Host_AFDW$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_Host_AFDW <- Host_AFDW_pcs[[best_pc_Host_AFDW]]\npredicted_values_Host_AFDW <- predict(models_Host_AFDW[[best_pc_Host_AFDW]], as.matrix(full_pred), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_Host_AFDW <- data.frame(\n  Actual = actual_values_Host_AFDW,\n  Predicted = predicted_values_Host_AFDW\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_Host_AFDW, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_Host_AFDW),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_Host_AFDW), y = max(predicted_values_Host_AFDW), \n           label = paste(\"R² =\", round(max(performance_results_Host_AFDW$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-50-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_Host_AFDW%>%filter(Host_AFDW_PC==best_pc_Host_AFDW))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   Host_AFDW_PC [1]\n##    gene       Host_AFDW_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_032266 PC11         -0.121 \n##  2 FUN_001078 PC11         -0.120 \n##  3 FUN_002256 PC11         -0.110 \n##  4 FUN_036908 PC11         -0.105 \n##  5 FUN_038819 PC11         -0.102 \n##  6 FUN_041309 PC11          0.0960\n##  7 FUN_011431 PC11          0.0955\n##  8 FUN_026266 PC11          0.0935\n##  9 FUN_035522 PC11          0.0903\n## 10 FUN_004295 PC11         -0.0870\n## 11 FUN_001845 PC11          0.0857\n## 12 FUN_035669 PC11         -0.0854\n## 13 FUN_008411 PC11          0.0853\n## 14 FUN_035580 PC11          0.0849\n## 15 FUN_037480 PC11         -0.0848\n## 16 FUN_021024 PC11          0.0840\n## 17 FUN_012009 PC11          0.0831\n## 18 FUN_029326 PC11          0.0812\n## 19 FUN_029077 PC11          0.0791\n## 20 FUN_027127 PC11          0.0789\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above 0.75\nall_pcs_Host_AFDW <- performance_results_Host_AFDW %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_Host_AFDW) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- Host_AFDW_pcs[[pc]]\n  predicted_values <- predict(models_Host_AFDW[[pc]], as.matrix(full_pred), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_Host_AFDW[performance_results_Host_AFDW$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-6.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-7.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-8.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-9.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-10.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-11.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-12.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-13.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-14.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-15.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-16.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-52-17.png)<!-- -->\n\nWe can also look at which feature(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_Host_AFDW) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_Host_AFDW[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important feature for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA/lncRNA/methylation Predictors for\", pc),\n         x = \"Feature\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-1.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-2.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-3.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-4.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-5.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-6.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-7.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-8.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-9.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-10.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-11.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-12.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-13.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-14.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-15.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-16.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-53-17.png)<!-- -->\n\n# 9 Symbiont photsynthesis (Am)\n\n## 9.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA+lncRNA+methylation\nmodels_Am <- train_models(Am_pcs, full_pred)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_Am <- get_feature_importance(models_Am)\nhead(feature_importance_Am, 20)  # Top predictive feature\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature    MeanImportance\n##    <chr>               <dbl>\n##  1 PC20_miRNA         0.327 \n##  2 PC10_miRNA         0.210 \n##  3 PC18_miRNA         0.201 \n##  4 PC16_miRNA         0.197 \n##  5 PC12_miRNA         0.172 \n##  6 PC9_miRNA          0.172 \n##  7 PC19_miRNA         0.162 \n##  8 PC14_miRNA         0.155 \n##  9 PC5_miRNA          0.150 \n## 10 PC7_miRNA          0.146 \n## 11 PC11_miRNA         0.138 \n## 12 PC23_WGBS          0.127 \n## 13 PC13_miRNA         0.125 \n## 14 PC17_miRNA         0.124 \n## 15 PC30_WGBS          0.121 \n## 16 PC19_WGBS          0.116 \n## 17 PC1_miRNA          0.104 \n## 18 PC15_miRNA         0.103 \n## 19 PC8_miRNA          0.0926\n## 20 PC6_miRNA          0.0910\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_Am <- evaluate_model_performance(models_Am, Am_pcs, full_pred)\nsummary(performance_results_Am$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.2020  0.8016  0.9304  0.8191  0.9905  0.9995       5\n```\n\n## 9.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\ntop_features_Am <- feature_importance_Am %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_Am, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA/lncRNA/methylation as Predictive Features\",\n       x = \"Feature\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-57-1.png)<!-- -->\n\n``` r\nggplot(performance_results_Am, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_Am$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 5 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-58-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_Am <- pca_Am$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_Am_df <- as.data.frame(loadings_Am) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"Am_PC\", values_to = \"Loading\")\n\n# View top genes contributing most to each PC\ntop_genes_Am <- loadings_Am_df %>%\n  group_by(Am_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 20 genes per PC\n\nprint(top_genes_Am)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   Am_PC [40]\n##    gene       Am_PC Loading\n##    <chr>      <chr>   <dbl>\n##  1 FUN_011681 PC1   -0.0250\n##  2 FUN_040949 PC1    0.0244\n##  3 FUN_027962 PC1    0.0244\n##  4 FUN_023373 PC1    0.0244\n##  5 FUN_000239 PC1    0.0244\n##  6 FUN_014926 PC1    0.0241\n##  7 FUN_001784 PC1   -0.0240\n##  8 FUN_016798 PC1   -0.0239\n##  9 FUN_023033 PC1   -0.0239\n## 10 FUN_016083 PC1   -0.0238\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_Am <- performance_results_Am$PC[which.max(performance_results_Am$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_Am <- Am_pcs[[best_pc_Am]]\npredicted_values_Am <- predict(models_Am[[best_pc_Am]], as.matrix(full_pred), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_Am <- data.frame(\n  Actual = actual_values_Am,\n  Predicted = predicted_values_Am\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_Am, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_Am),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_Am), y = max(predicted_values_Am), \n           label = paste(\"R² =\", round(max(performance_results_Am$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-60-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_Am%>%filter(Am_PC==best_pc_Am))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   Am_PC [1]\n##    gene       Am_PC Loading\n##    <chr>      <chr>   <dbl>\n##  1 FUN_005990 PC18   0.0578\n##  2 FUN_005864 PC18  -0.0489\n##  3 FUN_025766 PC18  -0.0441\n##  4 FUN_040041 PC18   0.0440\n##  5 FUN_017855 PC18  -0.0439\n##  6 FUN_043319 PC18   0.0431\n##  7 FUN_001332 PC18   0.0428\n##  8 FUN_008277 PC18  -0.0424\n##  9 FUN_015347 PC18  -0.0424\n## 10 FUN_001477 PC18   0.0422\n## 11 FUN_026571 PC18   0.0421\n## 12 FUN_027848 PC18  -0.0417\n## 13 FUN_005860 PC18  -0.0414\n## 14 FUN_024487 PC18  -0.0405\n## 15 FUN_033692 PC18  -0.0403\n## 16 FUN_041284 PC18  -0.0403\n## 17 FUN_000995 PC18  -0.0402\n## 18 FUN_001762 PC18  -0.0402\n## 19 FUN_014703 PC18   0.0395\n## 20 FUN_032441 PC18   0.0395\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above 0.75\nall_pcs_Am <- performance_results_Am %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_Am) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- Am_pcs[[pc]]\n  predicted_values <- predict(models_Am[[pc]], as.matrix(full_pred), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_Am[performance_results_Am$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-6.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-7.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-8.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-9.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-10.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-11.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-12.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-13.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-14.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-15.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-16.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-17.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-18.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-62-19.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_Am) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_Am[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA/lncRNA/methylation for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA/lncRNA/methylation Predictors for\", pc),\n         x = \"Features\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-1.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-2.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-3.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-4.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-5.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-6.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-7.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-8.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-9.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-10.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-11.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-12.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-13.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-14.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-15.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-16.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-17.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-18.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-63-19.png)<!-- -->\n\n# 10 ATP production (GO terms)\n\n## 10.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA/lncRNA/methylation PCs\nmodels_ATP_prod_GO <- train_models(ATP_prod_GO_pcs, full_pred)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_ATP_prod_GO <- get_feature_importance(models_ATP_prod_GO)\nhead(feature_importance_ATP_prod_GO, 20)  # Top predictive feature PCs\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature    MeanImportance\n##    <chr>               <dbl>\n##  1 PC19_miRNA        0.0437 \n##  2 PC12_miRNA        0.0380 \n##  3 PC5_miRNA         0.0298 \n##  4 PC18_miRNA        0.0251 \n##  5 PC20_miRNA        0.0236 \n##  6 PC30_WGBS         0.0224 \n##  7 PC16_miRNA        0.0223 \n##  8 PC1_miRNA         0.0209 \n##  9 PC2_miRNA         0.0169 \n## 10 PC24_WGBS         0.0154 \n## 11 PC12_WGBS         0.0145 \n## 12 PC23_WGBS         0.0143 \n## 13 PC7_miRNA         0.0139 \n## 14 PC3_miRNA         0.0137 \n## 15 PC4_miRNA         0.00962\n## 16 PC11_WGBS         0.00828\n## 17 PC15_miRNA        0.00820\n## 18 PC21_WGBS         0.00786\n## 19 PC9_WGBS          0.00761\n## 20 PC14_miRNA        0.00712\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_ATP_prod_GO <- evaluate_model_performance(models_ATP_prod_GO, ATP_prod_GO_pcs, full_pred)\nsummary(performance_results_ATP_prod_GO$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.1980  0.7518  0.9177  0.7903  0.9953  0.9994       3\n```\n\n## 10.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\ntop_features_ATP_prod_GO <- feature_importance_ATP_prod_GO %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_ATP_prod_GO, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA/lncRNA/methylation as Predictive Features\",\n       x = \"Feature\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-67-1.png)<!-- -->\n\n``` r\nggplot(performance_results_ATP_prod_GO, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_ATP_prod_GO$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 3 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-68-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_ATP_prod_GO <- pca_ATP_prod_GO$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_ATP_prod_GO_df <- as.data.frame(loadings_ATP_prod_GO) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"ATP_prod_GO_PC\", values_to = \"Loading\")\n\n# View top genes contributing most to each PC\ntop_genes_ATP_prod_GO <- loadings_ATP_prod_GO_df %>%\n  group_by(ATP_prod_GO_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 20 genes per PC\n\nprint(top_genes_ATP_prod_GO)\n```\n\n```         \n## # A tibble: 440 × 3\n## # Groups:   ATP_prod_GO_PC [22]\n##    gene       ATP_prod_GO_PC Loading\n##    <chr>      <chr>            <dbl>\n##  1 FUN_025802 PC1              0.328\n##  2 FUN_025367 PC1              0.316\n##  3 FUN_000960 PC1              0.313\n##  4 FUN_031975 PC1              0.311\n##  5 FUN_031686 PC1              0.290\n##  6 FUN_014565 PC1              0.277\n##  7 FUN_007016 PC1              0.246\n##  8 FUN_039808 PC1              0.243\n##  9 FUN_038166 PC1              0.242\n## 10 FUN_025823 PC1              0.208\n## # ℹ 430 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_ATP_prod_GO <- performance_results_ATP_prod_GO$PC[which.max(performance_results_ATP_prod_GO$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_ATP_prod_GO <- ATP_prod_GO_pcs[[best_pc_ATP_prod_GO]]\npredicted_values_ATP_prod_GO <- predict(models_ATP_prod_GO[[best_pc_ATP_prod_GO]], as.matrix(full_pred), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_ATP_prod_GO <- data.frame(\n  Actual = actual_values_ATP_prod_GO,\n  Predicted = predicted_values_ATP_prod_GO\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_ATP_prod_GO, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_ATP_prod_GO),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_ATP_prod_GO), y = max(predicted_values_ATP_prod_GO), \n           label = paste(\"R² =\", round(max(performance_results_ATP_prod_GO$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-70-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_ATP_prod_GO%>%filter(ATP_prod_GO_PC==best_pc_ATP_prod_GO))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   ATP_prod_GO_PC [1]\n##    gene       ATP_prod_GO_PC Loading\n##    <chr>      <chr>            <dbl>\n##  1 FUN_014563 PC4             0.371 \n##  2 FUN_040783 PC4            -0.361 \n##  3 FUN_015065 PC4             0.328 \n##  4 FUN_014565 PC4             0.319 \n##  5 FUN_038688 PC4             0.309 \n##  6 FUN_007016 PC4             0.258 \n##  7 FUN_038727 PC4            -0.249 \n##  8 FUN_032701 PC4            -0.236 \n##  9 FUN_014564 PC4             0.236 \n## 10 FUN_033885 PC4             0.209 \n## 11 FUN_028263 PC4            -0.197 \n## 12 FUN_038166 PC4            -0.183 \n## 13 FUN_025802 PC4            -0.137 \n## 14 FUN_038738 PC4             0.122 \n## 15 FUN_009532 PC4            -0.109 \n## 16 FUN_025367 PC4            -0.0883\n## 17 FUN_031686 PC4             0.0695\n## 18 FUN_039808 PC4            -0.0625\n## 19 FUN_036898 PC4            -0.0576\n## 20 FUN_000960 PC4            -0.0524\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above line in plot\nall_pcs_ATP_prod_GO <- performance_results_ATP_prod_GO %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_ATP_prod_GO) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- ATP_prod_GO_pcs[[pc]]\n  predicted_values <- predict(models_ATP_prod_GO[[pc]], as.matrix(full_pred), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_ATP_prod_GO[performance_results_ATP_prod_GO$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-72-6.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_ATP_prod_GO) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_ATP_prod_GO[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA/lncRNA/methylation for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA/lncRNA/methylation Predictors for\", pc),\n         x = \"Feature\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-1.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-2.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-3.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-4.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-5.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-73-6.png)<!-- -->\n\n# 11 Energy Usage/Storage (GO terms)\n\n## 11.1 The model\n\nTrain elastic models to predict gene expression PCs from miRNA expression\n\n``` r\n# Train models predicting gene expression PCs from miRNA/lncRNA/methylation PCs\nmodels_energy_GO <- train_models(energy_GO_pcs, full_pred)\n```\n\nExtract feature importance.\n\n``` r\nfeature_importance_energy_GO <- get_feature_importance(models_energy_GO)\nhead(feature_importance_energy_GO, 20)  # Top predictive miRNA/lncRNA/methylation PCs\n```\n\n```         \n## # A tibble: 20 × 2\n##    Feature    MeanImportance\n##    <chr>               <dbl>\n##  1 PC10_miRNA         0.0556\n##  2 PC16_miRNA         0.0544\n##  3 PC20_miRNA         0.0542\n##  4 PC11_miRNA         0.0516\n##  5 PC12_miRNA         0.0449\n##  6 PC18_miRNA         0.0423\n##  7 PC9_miRNA          0.0395\n##  8 PC17_miRNA         0.0378\n##  9 PC23_WGBS          0.0330\n## 10 PC6_miRNA          0.0327\n## 11 PC14_miRNA         0.0317\n## 12 PC5_miRNA          0.0307\n## 13 PC7_miRNA          0.0262\n## 14 PC20_WGBS          0.0255\n## 15 PC27_WGBS          0.0245\n## 16 PC19_miRNA         0.0240\n## 17 PC18_WGBS          0.0235\n## 18 PC29_WGBS          0.0215\n## 19 PC4_miRNA          0.0215\n## 20 PC15_miRNA         0.0208\n```\n\nEvaluate performance.\n\n``` r\nperformance_results_energy_GO <- evaluate_model_performance(models_energy_GO, energy_GO_pcs, full_pred)\nsummary(performance_results_energy_GO$R2)\n```\n\n```         \n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##  0.1689  0.6786  0.9219  0.7595  0.9822  0.9996       4\n```\n\n## 11.2 Results\n\nPlot results.\n\n``` r\n# Select top predictive features\n# few enough miRNA that we can show all\ntop_features_energy_GO <- feature_importance_energy_GO %>% top_n(50, MeanImportance)\n\n# Plot\nggplot(top_features_energy_GO, aes(x = reorder(Feature, MeanImportance), y = MeanImportance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +  # Flip for readability\n  theme_minimal() +\n  labs(title = \"miRNA/lncRNA/methylation as Predictive Features\",\n       x = \"Feature\",\n       y = \"Mean Importance\")\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-77-1.png)<!-- -->\n\n``` r\nggplot(performance_results_energy_GO, aes(x = as.factor(PC), y = R2)) +\n  geom_point(color = \"darkred\", size = 3) +\n  geom_hline(yintercept = mean(performance_results_energy_GO$R2, na.rm = TRUE), linetype = \"dashed\", color = \"blue\") +\n  theme_minimal() +\n  labs(title = \"Model Performance Across Gene Expression PCs\",\n       x = \"Gene Expression PC\",\n       y = \"R² (Variance Explained)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n```\n\n```         \n## Warning: Removed 4 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-78-1.png)<!-- -->\n\nView components associated with gene PCs\n\n``` r\n# Get the PCA rotation (loadings) matrix from the original gene PCA\nloadings_energy_GO <- pca_energy_GO$rotation  # Each column corresponds to a PC\n\n# Convert to data frame and reshape for plotting\nloadings_energy_GO_df <- as.data.frame(loadings_energy_GO) %>%\n  rownames_to_column(var = \"gene\") %>%\n  pivot_longer(-gene, names_to = \"energy_GO_PC\", values_to = \"Loading\")\n\n# View top genes contributing most to each PC\ntop_genes_energy_GO <- loadings_energy_GO_df %>%\n  group_by(energy_GO_PC) %>%\n  arrange(desc(abs(Loading))) %>%\n  slice_head(n = 20)  # Select top 20 genes per PC\n\nprint(top_genes_energy_GO)\n```\n\n```         \n## # A tibble: 800 × 3\n## # Groups:   energy_GO_PC [40]\n##    gene       energy_GO_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_028200 PC1            0.115\n##  2 FUN_040444 PC1            0.113\n##  3 FUN_017915 PC1            0.112\n##  4 FUN_001396 PC1           -0.109\n##  5 FUN_026618 PC1           -0.108\n##  6 FUN_029673 PC1           -0.107\n##  7 FUN_023596 PC1            0.107\n##  8 FUN_000370 PC1           -0.106\n##  9 FUN_039293 PC1            0.106\n## 10 FUN_001160 PC1           -0.105\n## # ℹ 790 more rows\n```\n\nView predicted vs actual gene expression values to evaluate model.\n\n``` r\n# Choose a gene expression PC to visualize (e.g., the most predictable one)\nbest_pc_energy_GO <- performance_results_energy_GO$PC[which.max(performance_results_energy_GO$R2)]\n\n# Extract actual and predicted values for that PC\nactual_values_energy_GO <- energy_GO_pcs[[best_pc_energy_GO]]\npredicted_values_energy_GO <- predict(models_energy_GO[[best_pc_energy_GO]], as.matrix(full_pred), s = \"lambda.min\")\n\n# Create data frame\nprediction_df_energy_GO <- data.frame(\n  Actual = actual_values_energy_GO,\n  Predicted = predicted_values_energy_GO\n)\n\n# Scatter plot with regression line\nggplot(prediction_df_energy_GO, aes(x = Actual, y = lambda.min)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  theme_minimal() +\n  labs(title = paste(\"Predicted vs. Actual for\", best_pc_energy_GO),\n       x = \"Actual Gene Expression PC\",\n       y = \"Predicted Gene Expression PC\") +\n  annotate(\"text\", x = min(actual_values_energy_GO), y = max(predicted_values_energy_GO), \n           label = paste(\"R² =\", round(max(performance_results_energy_GO$R2, na.rm=TRUE), 3)), \n           hjust = 0, color = \"black\", size = 5)\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-80-1.png)<!-- -->\n\n``` r\n## `geom_smooth()` using formula = 'y ~ x'\n```\n\nView top 20 genes associated with the PC with the highest R\\^2\n\n``` r\nprint(top_genes_energy_GO%>%filter(energy_GO_PC==best_pc_energy_GO))\n```\n\n```         \n## # A tibble: 20 × 3\n## # Groups:   energy_GO_PC [1]\n##    gene       energy_GO_PC Loading\n##    <chr>      <chr>          <dbl>\n##  1 FUN_022041 PC24           0.205\n##  2 FUN_037231 PC24          -0.189\n##  3 FUN_033720 PC24           0.187\n##  4 FUN_041903 PC24          -0.172\n##  5 FUN_009346 PC24          -0.163\n##  6 FUN_042618 PC24          -0.151\n##  7 FUN_012471 PC24          -0.150\n##  8 FUN_017849 PC24           0.150\n##  9 FUN_041699 PC24          -0.137\n## 10 FUN_011931 PC24           0.137\n## 11 FUN_011927 PC24           0.132\n## 12 FUN_036984 PC24           0.132\n## 13 FUN_023089 PC24           0.128\n## 14 FUN_012329 PC24           0.126\n## 15 FUN_014897 PC24           0.124\n## 16 FUN_001205 PC24           0.122\n## 17 FUN_004635 PC24           0.121\n## 18 FUN_006975 PC24          -0.120\n## 19 FUN_025406 PC24          -0.118\n## 20 FUN_043629 PC24           0.113\n```\n\nPlot performance for all PCs\n\n``` r\n# Select all PCs with R^2 values above line in plot\nall_pcs_energy_GO <- performance_results_energy_GO %>% filter(R2 > 0.75) %>% pull(PC)\n\nfor (pc in all_pcs_energy_GO) {\n  \n  # Extract actual and predicted values for that PC\n  actual_values <- energy_GO_pcs[[pc]]\n  predicted_values <- predict(models_energy_GO[[pc]], as.matrix(full_pred), s = \"lambda.min\")\n  \n  # Create data frame\n  prediction_df <- data.frame(\n    Actual = actual_values,\n    Predicted = predicted_values\n  )\n  \n  # Scatter plot with regression line\n  plot <- ggplot(prediction_df, aes(x = Actual, y = lambda.min)) +\n    geom_point(color = \"blue\", alpha = 0.7) +\n    geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    theme_minimal() +\n    labs(title = paste(\"Predicted vs. Actual for\", pc),\n         x = \"Actual Gene Expression PC\",\n         y = \"Predicted Gene Expression PC\") +\n    annotate(\"text\", x = min(actual_values), y = max(predicted_values), \n             label = paste(\"R² =\", round(max(performance_results_energy_GO[performance_results_energy_GO$PC==pc,2], na.rm=TRUE), 3)), \n             hjust = 0, color = \"black\", size = 5)\n  \n  print(plot)\n}\n```\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-1.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-2.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-3.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-4.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-5.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-6.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-7.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-8.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-9.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-10.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-11.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-12.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-13.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-14.png)<!-- -->\n\n```         \n## `geom_smooth()` using formula = 'y ~ x'\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-82-15.png)<!-- -->\n\nWe can also look at which miRNA(s) contributed most to predicting gene PCs of interest\n\n``` r\nget_feature_importance_for_pc <- function(model) {\n  coefs <- as.matrix(coef(model, s = \"lambda.min\"))[-1, , drop = FALSE]  # Remove intercept\n  coefs_df <- data.frame(Feature = rownames(coefs), Importance = abs(as.numeric(coefs)))\n  \n  return(coefs_df %>% arrange(desc(Importance)))  # Sort by importance\n}\n\nfor (pc in all_pcs_energy_GO) {\n  # Extract feature importance for the most predictable PC\n  best_pc_model <- models_energy_GO[[pc]]\n  best_pc_importance <- get_feature_importance_for_pc(best_pc_model)\n  \n  # Plot top most important miRNA/lncRNA/methylation PCs for predicting this PC\n  plot <- ggplot(best_pc_importance %>% head(20), aes(x = reorder(Feature, Importance), y = Importance)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = paste(\"Top miRNA/lncRNA/methylation PC Predictors for\", pc),\n         x = \"Feature\",\n         y = \"Importance Score\")\n  \n  print(plot)\n}\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-1.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-2.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-3.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-4.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-5.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-6.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-7.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-8.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-9.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-10.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-11.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-12.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-13.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-14.png)<!-- -->![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-83-15.png)<!-- -->\n\n# 12 Compare\n\nVisualize the relative importance of miRNA in predicting expression for these different gene sets:\n\n``` r\n# Perform min-max normalization on the mean importance of miRNA/lncRNA/methylation PC for each group\n# This will place all along a 0-1 range for comparison purposes\nnormalize <- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\n\n# Normalize\ntop_features_Host_AFDW$MeanImportance_norm <- normalize(top_features_Host_AFDW$MeanImportance)\ntop_features_Am$MeanImportance_norm <- normalize(top_features_Am$MeanImportance)\ntop_features_ATP_prod_GO$MeanImportance_norm <- normalize(top_features_ATP_prod_GO$MeanImportance)\ntop_features_energy_GO$MeanImportance_norm <- normalize(top_features_energy_GO$MeanImportance)\n\n# Add group labels\ntop_features_Host_AFDW <- top_features_Host_AFDW %>% mutate(group = \"Host_AFDW\")\ntop_features_Am <- top_features_Am %>% mutate(group = \"Am\")\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO %>% mutate(group = \"ATP_prod_GO\")\ntop_features_energy_GO <- top_features_energy_GO %>% mutate(group = \"energy_GO\")\n\n# Set rows in same order\ntop_features_Am <- top_features_Am[rownames(top_features_Host_AFDW),]\ntop_features_ATP_prod_GO <- top_features_ATP_prod_GO[rownames(top_features_Host_AFDW),]\ntop_features_energy_GO <- top_features_energy_GO[rownames(top_features_Host_AFDW),]\n\n# Combine\nall_gene_sets <- bind_rows(top_features_Host_AFDW, top_features_Am, top_features_ATP_prod_GO, top_features_energy_GO)\n# Remove raw mean importance\nall_gene_sets <- all_gene_sets %>% select(!MeanImportance)\n\n# Wide format: rows = miRNAs, columns = groups\nheatmap_df <- all_gene_sets %>%\n  pivot_wider(names_from = group, values_from = MeanImportance_norm)\n\nheatmap_df <- as.data.frame(heatmap_df)\n\n# Melt into long format for ggplot\nheatmap_long <- melt(heatmap_df, id.vars = \"Feature\")\n\nggplot(heatmap_long, aes(x = variable, y = Feature, fill = value)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  theme_minimal() +\n  labs(x = \"Group\", y = \"Feature\", fill = \"Importance\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-84-1.png)<!-- -->\n\nCluster by miRNA importance\n\n``` r\n# Make Feature column the rownames and convert to matrix\nrownames(heatmap_df) <- heatmap_df$Feature\nheatmap_matrix <- as.matrix(heatmap_df[, -1])  # Removes the 'Feature' column\n\n# Replace NAs with 0\nheatmap_matrix[is.na(heatmap_matrix)] <- 0\n\npheatmap(\n  heatmap_matrix, \n  cluster_rows = TRUE,  # Clustering miRNAs (rows) by similarity in importance\n  cluster_cols = TRUE,  # Clustering groups (columns)\n  scale = \"none\",  # No scaling (since data is already normalized)\n  show_rownames = TRUE,  # Show miRNA names\n  show_colnames = TRUE,  # Show group names\n  color = colorRampPalette(c(\"white\", \"red\"))(100),  # Red gradient for importance\n  main = \"miRNA/lncRNA/methylation PCs' Importance Across Groups\"  # Title of the heatmap\n)\n```\n\n![](./images/22.2-Apul-multiomic-machine-learning_files/figure-gfm/unnamed-chunk-85-1.png)<!-- -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}